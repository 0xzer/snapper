// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: contentEnvelope.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContentEnvelope_SavePolicy int32

const (
	ContentEnvelope_SavePolicy_ENVELOPE_UNSET ContentEnvelope_SavePolicy = 0
	ContentEnvelope_SavePolicy_PROHIBITED     ContentEnvelope_SavePolicy = 1
	ContentEnvelope_SavePolicy_LIFETIME       ContentEnvelope_SavePolicy = 2
	ContentEnvelope_SavePolicy_VIEW_SESSION   ContentEnvelope_SavePolicy = 3
)

// Enum value maps for ContentEnvelope_SavePolicy.
var (
	ContentEnvelope_SavePolicy_name = map[int32]string{
		0: "ENVELOPE_UNSET",
		1: "PROHIBITED",
		2: "LIFETIME",
		3: "VIEW_SESSION",
	}
	ContentEnvelope_SavePolicy_value = map[string]int32{
		"ENVELOPE_UNSET": 0,
		"PROHIBITED":     1,
		"LIFETIME":       2,
		"VIEW_SESSION":   3,
	}
)

func (x ContentEnvelope_SavePolicy) Enum() *ContentEnvelope_SavePolicy {
	p := new(ContentEnvelope_SavePolicy)
	*p = x
	return p
}

func (x ContentEnvelope_SavePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentEnvelope_SavePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_contentEnvelope_proto_enumTypes[0].Descriptor()
}

func (ContentEnvelope_SavePolicy) Type() protoreflect.EnumType {
	return &file_contentEnvelope_proto_enumTypes[0]
}

func (x ContentEnvelope_SavePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentEnvelope_SavePolicy.Descriptor instead.
func (ContentEnvelope_SavePolicy) EnumDescriptor() ([]byte, []int) {
	return file_contentEnvelope_proto_rawDescGZIP(), []int{0}
}

type ContentEnvelope_RemoteMediaInfo_MediaType int32

const (
	ContentEnvelope_RemoteMediaInfo_MediaType_MEDIATYPE_UNKNOWN ContentEnvelope_RemoteMediaInfo_MediaType = 0
	ContentEnvelope_RemoteMediaInfo_MediaType_IMAGE             ContentEnvelope_RemoteMediaInfo_MediaType = 1
	ContentEnvelope_RemoteMediaInfo_MediaType_VIDEO             ContentEnvelope_RemoteMediaInfo_MediaType = 2
	ContentEnvelope_RemoteMediaInfo_MediaType_GIF               ContentEnvelope_RemoteMediaInfo_MediaType = 3
)

// Enum value maps for ContentEnvelope_RemoteMediaInfo_MediaType.
var (
	ContentEnvelope_RemoteMediaInfo_MediaType_name = map[int32]string{
		0: "MEDIATYPE_UNKNOWN",
		1: "IMAGE",
		2: "VIDEO",
		3: "GIF",
	}
	ContentEnvelope_RemoteMediaInfo_MediaType_value = map[string]int32{
		"MEDIATYPE_UNKNOWN": 0,
		"IMAGE":             1,
		"VIDEO":             2,
		"GIF":               3,
	}
)

func (x ContentEnvelope_RemoteMediaInfo_MediaType) Enum() *ContentEnvelope_RemoteMediaInfo_MediaType {
	p := new(ContentEnvelope_RemoteMediaInfo_MediaType)
	*p = x
	return p
}

func (x ContentEnvelope_RemoteMediaInfo_MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentEnvelope_RemoteMediaInfo_MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_contentEnvelope_proto_enumTypes[1].Descriptor()
}

func (ContentEnvelope_RemoteMediaInfo_MediaType) Type() protoreflect.EnumType {
	return &file_contentEnvelope_proto_enumTypes[1]
}

func (x ContentEnvelope_RemoteMediaInfo_MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentEnvelope_RemoteMediaInfo_MediaType.Descriptor instead.
func (ContentEnvelope_RemoteMediaInfo_MediaType) EnumDescriptor() ([]byte, []int) {
	return file_contentEnvelope_proto_rawDescGZIP(), []int{1}
}

type ContentEnvelope struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteMediaInfos   []*ContentEnvelope_RemoteMediaInfo `protobuf:"bytes,1,rep,name=remoteMediaInfos,proto3" json:"remoteMediaInfos,omitempty"`
	ContentType        ContentType                        `protobuf:"varint,2,opt,name=contentType,proto3,enum=common.ContentType" json:"contentType,omitempty"`
	EnvelopeEncryption *EnvelopeEncryption                `protobuf:"bytes,3,opt,name=envelopeEncryption,proto3" json:"envelopeEncryption,omitempty"`
	// content.Contents contents = 4;
	// The actual contents of the message received is in here, you need to decode it yourself with the content.proto/Contents message
	Contents            []byte                                `protobuf:"bytes,4,opt,name=contents,proto3" json:"contents,omitempty"` // snapchat: lets store the contents in bytes because we are special
	MediaReferenceLists []*ContentEnvelope_MediaReferenceList `protobuf:"bytes,5,rep,name=mediaReferenceLists,proto3" json:"mediaReferenceLists,omitempty"`
	DisplayInfo         *ContentEnvelope_DisplayInfo          `protobuf:"bytes,6,opt,name=displayInfo,proto3" json:"displayInfo,omitempty"`
	SavePolicy          ContentEnvelope_SavePolicy            `protobuf:"varint,7,opt,name=savePolicy,proto3,enum=contentEnvelope.ContentEnvelope_SavePolicy" json:"savePolicy,omitempty"`
	Thumbnails          *ContentEnvelope_Thumbnails           `protobuf:"bytes,8,opt,name=thumbnails,proto3" json:"thumbnails,omitempty"`
	FeedDisplayInfo     *ContentEnvelope_FeedDisplayInfo      `protobuf:"bytes,9,opt,name=feedDisplayInfo,proto3" json:"feedDisplayInfo,omitempty"`
	// Types that are assignable to MessageTypeMetadata:
	//
	//	*ContentEnvelope_AudioNote
	//	*ContentEnvelope_SnapReply
	//	*ContentEnvelope_Share
	MessageTypeMetadata        isContentEnvelope_MessageTypeMetadata       `protobuf_oneof:"messageTypeMetadata"`
	BotMentionResponseMetadata *ContentEnvelope_BotMentionResponseMetadata `protobuf:"bytes,12,opt,name=botMentionResponseMetadata,proto3" json:"botMentionResponseMetadata,omitempty"`
}

func (x *ContentEnvelope) Reset() {
	*x = ContentEnvelope{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contentEnvelope_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentEnvelope) ProtoMessage() {}

func (x *ContentEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_contentEnvelope_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentEnvelope.ProtoReflect.Descriptor instead.
func (*ContentEnvelope) Descriptor() ([]byte, []int) {
	return file_contentEnvelope_proto_rawDescGZIP(), []int{0}
}

func (x *ContentEnvelope) GetRemoteMediaInfos() []*ContentEnvelope_RemoteMediaInfo {
	if x != nil {
		return x.RemoteMediaInfos
	}
	return nil
}

func (x *ContentEnvelope) GetContentType() ContentType {
	if x != nil {
		return x.ContentType
	}
	return ContentType_SNAP
}

func (x *ContentEnvelope) GetEnvelopeEncryption() *EnvelopeEncryption {
	if x != nil {
		return x.EnvelopeEncryption
	}
	return nil
}

func (x *ContentEnvelope) GetContents() []byte {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *ContentEnvelope) GetMediaReferenceLists() []*ContentEnvelope_MediaReferenceList {
	if x != nil {
		return x.MediaReferenceLists
	}
	return nil
}

func (x *ContentEnvelope) GetDisplayInfo() *ContentEnvelope_DisplayInfo {
	if x != nil {
		return x.DisplayInfo
	}
	return nil
}

func (x *ContentEnvelope) GetSavePolicy() ContentEnvelope_SavePolicy {
	if x != nil {
		return x.SavePolicy
	}
	return ContentEnvelope_SavePolicy_ENVELOPE_UNSET
}

func (x *ContentEnvelope) GetThumbnails() *ContentEnvelope_Thumbnails {
	if x != nil {
		return x.Thumbnails
	}
	return nil
}

func (x *ContentEnvelope) GetFeedDisplayInfo() *ContentEnvelope_FeedDisplayInfo {
	if x != nil {
		return x.FeedDisplayInfo
	}
	return nil
}

func (m *ContentEnvelope) GetMessageTypeMetadata() isContentEnvelope_MessageTypeMetadata {
	if m != nil {
		return m.MessageTypeMetadata
	}
	return nil
}

func (x *ContentEnvelope) GetAudioNote() *AudioNoteMetadata {
	if x, ok := x.GetMessageTypeMetadata().(*ContentEnvelope_AudioNote); ok {
		return x.AudioNote
	}
	return nil
}

func (x *ContentEnvelope) GetSnapReply() *SnapReplyMetadata {
	if x, ok := x.GetMessageTypeMetadata().(*ContentEnvelope_SnapReply); ok {
		return x.SnapReply
	}
	return nil
}

func (x *ContentEnvelope) GetShare() *ShareMetadata {
	if x, ok := x.GetMessageTypeMetadata().(*ContentEnvelope_Share); ok {
		return x.Share
	}
	return nil
}

func (x *ContentEnvelope) GetBotMentionResponseMetadata() *ContentEnvelope_BotMentionResponseMetadata {
	if x != nil {
		return x.BotMentionResponseMetadata
	}
	return nil
}

type isContentEnvelope_MessageTypeMetadata interface {
	isContentEnvelope_MessageTypeMetadata()
}

type ContentEnvelope_AudioNote struct {
	AudioNote *AudioNoteMetadata `protobuf:"bytes,11,opt,name=audioNote,proto3,oneof"`
}

type ContentEnvelope_SnapReply struct {
	SnapReply *SnapReplyMetadata `protobuf:"bytes,13,opt,name=snapReply,proto3,oneof"`
}

type ContentEnvelope_Share struct {
	Share *ShareMetadata `protobuf:"bytes,14,opt,name=share,proto3,oneof"`
}

func (*ContentEnvelope_AudioNote) isContentEnvelope_MessageTypeMetadata() {}

func (*ContentEnvelope_SnapReply) isContentEnvelope_MessageTypeMetadata() {}

func (*ContentEnvelope_Share) isContentEnvelope_MessageTypeMetadata() {}

type ContentEnvelope_BotMentionResponseMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequesterId      *UUID `protobuf:"bytes,1,opt,name=requesterId,proto3" json:"requesterId,omitempty"`
	RequestMessageId int64 `protobuf:"varint,2,opt,name=requestMessageId,proto3" json:"requestMessageId,omitempty"`
}

func (x *ContentEnvelope_BotMentionResponseMetadata) Reset() {
	*x = ContentEnvelope_BotMentionResponseMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contentEnvelope_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentEnvelope_BotMentionResponseMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentEnvelope_BotMentionResponseMetadata) ProtoMessage() {}

func (x *ContentEnvelope_BotMentionResponseMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_contentEnvelope_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentEnvelope_BotMentionResponseMetadata.ProtoReflect.Descriptor instead.
func (*ContentEnvelope_BotMentionResponseMetadata) Descriptor() ([]byte, []int) {
	return file_contentEnvelope_proto_rawDescGZIP(), []int{1}
}

func (x *ContentEnvelope_BotMentionResponseMetadata) GetRequesterId() *UUID {
	if x != nil {
		return x.RequesterId
	}
	return nil
}

func (x *ContentEnvelope_BotMentionResponseMetadata) GetRequestMessageId() int64 {
	if x != nil {
		return x.RequestMessageId
	}
	return 0
}

type ShareMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoryMediaState int32 `protobuf:"varint,1,opt,name=storyMediaState,proto3" json:"storyMediaState,omitempty"`
}

func (x *ShareMetadata) Reset() {
	*x = ShareMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contentEnvelope_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareMetadata) ProtoMessage() {}

func (x *ShareMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_contentEnvelope_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareMetadata.ProtoReflect.Descriptor instead.
func (*ShareMetadata) Descriptor() ([]byte, []int) {
	return file_contentEnvelope_proto_rawDescGZIP(), []int{2}
}

func (x *ShareMetadata) GetStoryMediaState() int32 {
	if x != nil {
		return x.StoryMediaState
	}
	return 0
}

type SnapReplyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoryMediaState int32 `protobuf:"varint,1,opt,name=storyMediaState,proto3" json:"storyMediaState,omitempty"`
}

func (x *SnapReplyMetadata) Reset() {
	*x = SnapReplyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contentEnvelope_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapReplyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapReplyMetadata) ProtoMessage() {}

func (x *SnapReplyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_contentEnvelope_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapReplyMetadata.ProtoReflect.Descriptor instead.
func (*SnapReplyMetadata) Descriptor() ([]byte, []int) {
	return file_contentEnvelope_proto_rawDescGZIP(), []int{3}
}

func (x *SnapReplyMetadata) GetStoryMediaState() int32 {
	if x != nil {
		return x.StoryMediaState
	}
	return 0
}

type AudioNoteMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowsTranscription bool            `protobuf:"varint,1,opt,name=allowsTranscription,proto3" json:"allowsTranscription,omitempty"`
	Transcriptions      *Transcriptions `protobuf:"bytes,10,opt,name=transcriptions,proto3" json:"transcriptions,omitempty"`
}

func (x *AudioNoteMetadata) Reset() {
	*x = AudioNoteMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contentEnvelope_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioNoteMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioNoteMetadata) ProtoMessage() {}

func (x *AudioNoteMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_contentEnvelope_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioNoteMetadata.ProtoReflect.Descriptor instead.
func (*AudioNoteMetadata) Descriptor() ([]byte, []int) {
	return file_contentEnvelope_proto_rawDescGZIP(), []int{4}
}

func (x *AudioNoteMetadata) GetAllowsTranscription() bool {
	if x != nil {
		return x.AllowsTranscription
	}
	return false
}

func (x *AudioNoteMetadata) GetTranscriptions() *Transcriptions {
	if x != nil {
		return x.Transcriptions
	}
	return nil
}

type ContentEnvelope_FeedDisplayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FeedDisplayInfo:
	//
	//	*ContentEnvelope_FeedDisplayInfo_SnapDisplayInfo
	//	*ContentEnvelope_FeedDisplayInfo_StatusMessageDisplayInfo
	//	*ContentEnvelope_FeedDisplayInfo_ExternalMediaDisplayInfo
	//	*ContentEnvelope_FeedDisplayInfo_ShareDisplayInfo
	FeedDisplayInfo isContentEnvelope_FeedDisplayInfo_FeedDisplayInfo `protobuf_oneof:"feedDisplayInfo"`
}

func (x *ContentEnvelope_FeedDisplayInfo) Reset() {
	*x = ContentEnvelope_FeedDisplayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contentEnvelope_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentEnvelope_FeedDisplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentEnvelope_FeedDisplayInfo) ProtoMessage() {}

func (x *ContentEnvelope_FeedDisplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_contentEnvelope_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentEnvelope_FeedDisplayInfo.ProtoReflect.Descriptor instead.
func (*ContentEnvelope_FeedDisplayInfo) Descriptor() ([]byte, []int) {
	return file_contentEnvelope_proto_rawDescGZIP(), []int{5}
}

func (m *ContentEnvelope_FeedDisplayInfo) GetFeedDisplayInfo() isContentEnvelope_FeedDisplayInfo_FeedDisplayInfo {
	if m != nil {
		return m.FeedDisplayInfo
	}
	return nil
}

func (x *ContentEnvelope_FeedDisplayInfo) GetSnapDisplayInfo() *SnapDisplayInfo {
	if x, ok := x.GetFeedDisplayInfo().(*ContentEnvelope_FeedDisplayInfo_SnapDisplayInfo); ok {
		return x.SnapDisplayInfo
	}
	return nil
}

func (x *ContentEnvelope_FeedDisplayInfo) GetStatusMessageDisplayInfo() *StatusMessageDisplayInfo {
	if x, ok := x.GetFeedDisplayInfo().(*ContentEnvelope_FeedDisplayInfo_StatusMessageDisplayInfo); ok {
		return x.StatusMessageDisplayInfo
	}
	return nil
}

func (x *ContentEnvelope_FeedDisplayInfo) GetExternalMediaDisplayInfo() *ExternalMediaDisplayInfo {
	if x, ok := x.GetFeedDisplayInfo().(*ContentEnvelope_FeedDisplayInfo_ExternalMediaDisplayInfo); ok {
		return x.ExternalMediaDisplayInfo
	}
	return nil
}

func (x *ContentEnvelope_FeedDisplayInfo) GetShareDisplayInfo() *ShareDisplayInfo {
	if x, ok := x.GetFeedDisplayInfo().(*ContentEnvelope_FeedDisplayInfo_ShareDisplayInfo); ok {
		return x.ShareDisplayInfo
	}
	return nil
}

type isContentEnvelope_FeedDisplayInfo_FeedDisplayInfo interface {
	isContentEnvelope_FeedDisplayInfo_FeedDisplayInfo()
}

type ContentEnvelope_FeedDisplayInfo_SnapDisplayInfo struct {
	SnapDisplayInfo *SnapDisplayInfo `protobuf:"bytes,1,opt,name=snapDisplayInfo,proto3,oneof"`
}

type ContentEnvelope_FeedDisplayInfo_StatusMessageDisplayInfo struct {
	StatusMessageDisplayInfo *StatusMessageDisplayInfo `protobuf:"bytes,2,opt,name=statusMessageDisplayInfo,proto3,oneof"`
}

type ContentEnvelope_FeedDisplayInfo_ExternalMediaDisplayInfo struct {
	ExternalMediaDisplayInfo *ExternalMediaDisplayInfo `protobuf:"bytes,3,opt,name=externalMediaDisplayInfo,proto3,oneof"`
}

type ContentEnvelope_FeedDisplayInfo_ShareDisplayInfo struct {
	ShareDisplayInfo *ShareDisplayInfo `protobuf:"bytes,4,opt,name=shareDisplayInfo,proto3,oneof"`
}

func (*ContentEnvelope_FeedDisplayInfo_SnapDisplayInfo) isContentEnvelope_FeedDisplayInfo_FeedDisplayInfo() {
}

func (*ContentEnvelope_FeedDisplayInfo_StatusMessageDisplayInfo) isContentEnvelope_FeedDisplayInfo_FeedDisplayInfo() {
}

func (*ContentEnvelope_FeedDisplayInfo_ExternalMediaDisplayInfo) isContentEnvelope_FeedDisplayInfo_FeedDisplayInfo() {
}

func (*ContentEnvelope_FeedDisplayInfo_ShareDisplayInfo) isContentEnvelope_FeedDisplayInfo_FeedDisplayInfo() {
}

type ContentEnvelope_Thumbnails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thumbnails []*ThumbnailInfo `protobuf:"bytes,1,rep,name=thumbnails,proto3" json:"thumbnails,omitempty"`
}

func (x *ContentEnvelope_Thumbnails) Reset() {
	*x = ContentEnvelope_Thumbnails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contentEnvelope_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentEnvelope_Thumbnails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentEnvelope_Thumbnails) ProtoMessage() {}

func (x *ContentEnvelope_Thumbnails) ProtoReflect() protoreflect.Message {
	mi := &file_contentEnvelope_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentEnvelope_Thumbnails.ProtoReflect.Descriptor instead.
func (*ContentEnvelope_Thumbnails) Descriptor() ([]byte, []int) {
	return file_contentEnvelope_proto_rawDescGZIP(), []int{6}
}

func (x *ContentEnvelope_Thumbnails) GetThumbnails() []*ThumbnailInfo {
	if x != nil {
		return x.Thumbnails
	}
	return nil
}

type ContentEnvelope_DisplayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasAudio bool `protobuf:"varint,1,opt,name=hasAudio,proto3" json:"hasAudio,omitempty"`
}

func (x *ContentEnvelope_DisplayInfo) Reset() {
	*x = ContentEnvelope_DisplayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contentEnvelope_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentEnvelope_DisplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentEnvelope_DisplayInfo) ProtoMessage() {}

func (x *ContentEnvelope_DisplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_contentEnvelope_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentEnvelope_DisplayInfo.ProtoReflect.Descriptor instead.
func (*ContentEnvelope_DisplayInfo) Descriptor() ([]byte, []int) {
	return file_contentEnvelope_proto_rawDescGZIP(), []int{7}
}

func (x *ContentEnvelope_DisplayInfo) GetHasAudio() bool {
	if x != nil {
		return x.HasAudio
	}
	return false
}

type ContentEnvelope_RemoteMediaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MediaInfo:
	//
	//	*ContentEnvelope_RemoteMediaInfo_ContentObject
	//	*ContentEnvelope_RemoteMediaInfo_LegacyMediaId
	//	*ContentEnvelope_RemoteMediaInfo_ContentUrl
	MediaInfo isContentEnvelope_RemoteMediaInfo_MediaInfo `protobuf_oneof:"mediaInfo"`
	MediaType int32                                       `protobuf:"varint,3,opt,name=mediaType,proto3" json:"mediaType,omitempty"`
	HasAudio  bool                                        `protobuf:"varint,4,opt,name=hasAudio,proto3" json:"hasAudio,omitempty"`
}

func (x *ContentEnvelope_RemoteMediaInfo) Reset() {
	*x = ContentEnvelope_RemoteMediaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contentEnvelope_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentEnvelope_RemoteMediaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentEnvelope_RemoteMediaInfo) ProtoMessage() {}

func (x *ContentEnvelope_RemoteMediaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_contentEnvelope_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentEnvelope_RemoteMediaInfo.ProtoReflect.Descriptor instead.
func (*ContentEnvelope_RemoteMediaInfo) Descriptor() ([]byte, []int) {
	return file_contentEnvelope_proto_rawDescGZIP(), []int{8}
}

func (m *ContentEnvelope_RemoteMediaInfo) GetMediaInfo() isContentEnvelope_RemoteMediaInfo_MediaInfo {
	if m != nil {
		return m.MediaInfo
	}
	return nil
}

func (x *ContentEnvelope_RemoteMediaInfo) GetContentObject() []byte {
	if x, ok := x.GetMediaInfo().(*ContentEnvelope_RemoteMediaInfo_ContentObject); ok {
		return x.ContentObject
	}
	return nil
}

func (x *ContentEnvelope_RemoteMediaInfo) GetLegacyMediaId() string {
	if x, ok := x.GetMediaInfo().(*ContentEnvelope_RemoteMediaInfo_LegacyMediaId); ok {
		return x.LegacyMediaId
	}
	return ""
}

func (x *ContentEnvelope_RemoteMediaInfo) GetContentUrl() string {
	if x, ok := x.GetMediaInfo().(*ContentEnvelope_RemoteMediaInfo_ContentUrl); ok {
		return x.ContentUrl
	}
	return ""
}

func (x *ContentEnvelope_RemoteMediaInfo) GetMediaType() int32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *ContentEnvelope_RemoteMediaInfo) GetHasAudio() bool {
	if x != nil {
		return x.HasAudio
	}
	return false
}

type isContentEnvelope_RemoteMediaInfo_MediaInfo interface {
	isContentEnvelope_RemoteMediaInfo_MediaInfo()
}

type ContentEnvelope_RemoteMediaInfo_ContentObject struct {
	ContentObject []byte `protobuf:"bytes,1,opt,name=contentObject,proto3,oneof"`
}

type ContentEnvelope_RemoteMediaInfo_LegacyMediaId struct {
	LegacyMediaId string `protobuf:"bytes,2,opt,name=legacyMediaId,proto3,oneof"`
}

type ContentEnvelope_RemoteMediaInfo_ContentUrl struct {
	ContentUrl string `protobuf:"bytes,5,opt,name=contentUrl,proto3,oneof"`
}

func (*ContentEnvelope_RemoteMediaInfo_ContentObject) isContentEnvelope_RemoteMediaInfo_MediaInfo() {}

func (*ContentEnvelope_RemoteMediaInfo_LegacyMediaId) isContentEnvelope_RemoteMediaInfo_MediaInfo() {}

func (*ContentEnvelope_RemoteMediaInfo_ContentUrl) isContentEnvelope_RemoteMediaInfo_MediaInfo() {}

var File_contentEnvelope_proto protoreflect.FileDescriptor

var file_contentEnvelope_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x1a, 0x0a, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x85, 0x08, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x65, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x12, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x5b, 0x0a, 0x13, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x13, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x4e, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4b, 0x0a, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x53, 0x61, 0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x0a, 0x73, 0x61, 0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4b, 0x0a, 0x0a,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x5f, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0a, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x5a, 0x0a, 0x0f, 0x66, 0x65, 0x65,
	0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x46, 0x65, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x66, 0x65, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4e, 0x6f,
	0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x09,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x73, 0x6e, 0x61,
	0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x53,
	0x6e, 0x61, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x36, 0x0a,
	0x05, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x7b, 0x0a, 0x1a, 0x62, 0x6f, 0x74, 0x4d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x42, 0x6f, 0x74, 0x4d,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x1a, 0x62, 0x6f, 0x74, 0x4d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x15, 0x0a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x86, 0x01, 0x0a, 0x2a, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x42, 0x6f,
	0x74, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x75, 0x75, 0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x22, 0x39, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x3d, 0x0a,
	0x11, 0x53, 0x6e, 0x61, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x8c, 0x01, 0x0a,
	0x11, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4e, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x85, 0x03, 0x0a, 0x1f,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f,
	0x46, 0x65, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x44, 0x0a, 0x0f, 0x73, 0x6e, 0x61, 0x70, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x6e, 0x61, 0x70, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5f, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5f, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x11, 0x0a, 0x0f, 0x66, 0x65, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x52, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x39, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x22, 0xda, 0x01, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x26,
	0x0a, 0x0d, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2a,
	0x60, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x5f, 0x53, 0x61, 0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x4e, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x49, 0x46, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x03, 0x2a, 0x61, 0x0a, 0x29, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x47,
	0x49, 0x46, 0x10, 0x03, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_contentEnvelope_proto_rawDescOnce sync.Once
	file_contentEnvelope_proto_rawDescData = file_contentEnvelope_proto_rawDesc
)

func file_contentEnvelope_proto_rawDescGZIP() []byte {
	file_contentEnvelope_proto_rawDescOnce.Do(func() {
		file_contentEnvelope_proto_rawDescData = protoimpl.X.CompressGZIP(file_contentEnvelope_proto_rawDescData)
	})
	return file_contentEnvelope_proto_rawDescData
}

var file_contentEnvelope_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_contentEnvelope_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_contentEnvelope_proto_goTypes = []interface{}{
	(ContentEnvelope_SavePolicy)(0),                    // 0: contentEnvelope.ContentEnvelope_SavePolicy
	(ContentEnvelope_RemoteMediaInfo_MediaType)(0),     // 1: contentEnvelope.ContentEnvelope_RemoteMediaInfo_MediaType
	(*ContentEnvelope)(nil),                            // 2: contentEnvelope.ContentEnvelope
	(*ContentEnvelope_BotMentionResponseMetadata)(nil), // 3: contentEnvelope.ContentEnvelope_BotMentionResponseMetadata
	(*ShareMetadata)(nil),                              // 4: contentEnvelope.ShareMetadata
	(*SnapReplyMetadata)(nil),                          // 5: contentEnvelope.SnapReplyMetadata
	(*AudioNoteMetadata)(nil),                          // 6: contentEnvelope.AudioNoteMetadata
	(*ContentEnvelope_FeedDisplayInfo)(nil),            // 7: contentEnvelope.ContentEnvelope_FeedDisplayInfo
	(*ContentEnvelope_Thumbnails)(nil),                 // 8: contentEnvelope.ContentEnvelope_Thumbnails
	(*ContentEnvelope_DisplayInfo)(nil),                // 9: contentEnvelope.ContentEnvelope_DisplayInfo
	(*ContentEnvelope_RemoteMediaInfo)(nil),            // 10: contentEnvelope.ContentEnvelope_RemoteMediaInfo
	(ContentType)(0),                                   // 11: common.ContentType
	(*EnvelopeEncryption)(nil),                         // 12: crypto.EnvelopeEncryption
	(*ContentEnvelope_MediaReferenceList)(nil),         // 13: media.ContentEnvelope_MediaReferenceList
	(*UUID)(nil),                     // 14: uuid.UUID
	(*Transcriptions)(nil),           // 15: transcription.Transcriptions
	(*SnapDisplayInfo)(nil),          // 16: display.SnapDisplayInfo
	(*StatusMessageDisplayInfo)(nil), // 17: display.StatusMessageDisplayInfo
	(*ExternalMediaDisplayInfo)(nil), // 18: display.ExternalMediaDisplayInfo
	(*ShareDisplayInfo)(nil),         // 19: display.ShareDisplayInfo
	(*ThumbnailInfo)(nil),            // 20: media.ThumbnailInfo
}
var file_contentEnvelope_proto_depIdxs = []int32{
	10, // 0: contentEnvelope.ContentEnvelope.remoteMediaInfos:type_name -> contentEnvelope.ContentEnvelope_RemoteMediaInfo
	11, // 1: contentEnvelope.ContentEnvelope.contentType:type_name -> common.ContentType
	12, // 2: contentEnvelope.ContentEnvelope.envelopeEncryption:type_name -> crypto.EnvelopeEncryption
	13, // 3: contentEnvelope.ContentEnvelope.mediaReferenceLists:type_name -> media.ContentEnvelope_MediaReferenceList
	9,  // 4: contentEnvelope.ContentEnvelope.displayInfo:type_name -> contentEnvelope.ContentEnvelope_DisplayInfo
	0,  // 5: contentEnvelope.ContentEnvelope.savePolicy:type_name -> contentEnvelope.ContentEnvelope_SavePolicy
	8,  // 6: contentEnvelope.ContentEnvelope.thumbnails:type_name -> contentEnvelope.ContentEnvelope_Thumbnails
	7,  // 7: contentEnvelope.ContentEnvelope.feedDisplayInfo:type_name -> contentEnvelope.ContentEnvelope_FeedDisplayInfo
	6,  // 8: contentEnvelope.ContentEnvelope.audioNote:type_name -> contentEnvelope.AudioNoteMetadata
	5,  // 9: contentEnvelope.ContentEnvelope.snapReply:type_name -> contentEnvelope.SnapReplyMetadata
	4,  // 10: contentEnvelope.ContentEnvelope.share:type_name -> contentEnvelope.ShareMetadata
	3,  // 11: contentEnvelope.ContentEnvelope.botMentionResponseMetadata:type_name -> contentEnvelope.ContentEnvelope_BotMentionResponseMetadata
	14, // 12: contentEnvelope.ContentEnvelope_BotMentionResponseMetadata.requesterId:type_name -> uuid.UUID
	15, // 13: contentEnvelope.AudioNoteMetadata.transcriptions:type_name -> transcription.Transcriptions
	16, // 14: contentEnvelope.ContentEnvelope_FeedDisplayInfo.snapDisplayInfo:type_name -> display.SnapDisplayInfo
	17, // 15: contentEnvelope.ContentEnvelope_FeedDisplayInfo.statusMessageDisplayInfo:type_name -> display.StatusMessageDisplayInfo
	18, // 16: contentEnvelope.ContentEnvelope_FeedDisplayInfo.externalMediaDisplayInfo:type_name -> display.ExternalMediaDisplayInfo
	19, // 17: contentEnvelope.ContentEnvelope_FeedDisplayInfo.shareDisplayInfo:type_name -> display.ShareDisplayInfo
	20, // 18: contentEnvelope.ContentEnvelope_Thumbnails.thumbnails:type_name -> media.ThumbnailInfo
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_contentEnvelope_proto_init() }
func file_contentEnvelope_proto_init() {
	if File_contentEnvelope_proto != nil {
		return
	}
	file_uuid_proto_init()
	file_crypto_proto_init()
	file_media_proto_init()
	file_transcription_proto_init()
	file_common_proto_init()
	file_display_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_contentEnvelope_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentEnvelope); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contentEnvelope_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentEnvelope_BotMentionResponseMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contentEnvelope_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contentEnvelope_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapReplyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contentEnvelope_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioNoteMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contentEnvelope_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentEnvelope_FeedDisplayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contentEnvelope_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentEnvelope_Thumbnails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contentEnvelope_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentEnvelope_DisplayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contentEnvelope_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentEnvelope_RemoteMediaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_contentEnvelope_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ContentEnvelope_AudioNote)(nil),
		(*ContentEnvelope_SnapReply)(nil),
		(*ContentEnvelope_Share)(nil),
	}
	file_contentEnvelope_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ContentEnvelope_FeedDisplayInfo_SnapDisplayInfo)(nil),
		(*ContentEnvelope_FeedDisplayInfo_StatusMessageDisplayInfo)(nil),
		(*ContentEnvelope_FeedDisplayInfo_ExternalMediaDisplayInfo)(nil),
		(*ContentEnvelope_FeedDisplayInfo_ShareDisplayInfo)(nil),
	}
	file_contentEnvelope_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ContentEnvelope_RemoteMediaInfo_ContentObject)(nil),
		(*ContentEnvelope_RemoteMediaInfo_LegacyMediaId)(nil),
		(*ContentEnvelope_RemoteMediaInfo_ContentUrl)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contentEnvelope_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_contentEnvelope_proto_goTypes,
		DependencyIndexes: file_contentEnvelope_proto_depIdxs,
		EnumInfos:         file_contentEnvelope_proto_enumTypes,
		MessageInfos:      file_contentEnvelope_proto_msgTypes,
	}.Build()
	File_contentEnvelope_proto = out.File
	file_contentEnvelope_proto_rawDesc = nil
	file_contentEnvelope_proto_goTypes = nil
	file_contentEnvelope_proto_depIdxs = nil
}
