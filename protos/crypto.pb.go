// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: crypto.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnvelopeEncryption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Method:
	//
	//	*EnvelopeEncryption_None
	//	*EnvelopeEncryption_ConversationV1
	//	*EnvelopeEncryption_FideliusEncryption
	//	*EnvelopeEncryption_ClearTextMediaKey
	//	*EnvelopeEncryption_EelEncryption
	//	*EnvelopeEncryption_ClearTextEelKeyEncryption
	Method isEnvelopeEncryption_Method `protobuf_oneof:"method"`
}

func (x *EnvelopeEncryption) Reset() {
	*x = EnvelopeEncryption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvelopeEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvelopeEncryption) ProtoMessage() {}

func (x *EnvelopeEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvelopeEncryption.ProtoReflect.Descriptor instead.
func (*EnvelopeEncryption) Descriptor() ([]byte, []int) {
	return file_crypto_proto_rawDescGZIP(), []int{0}
}

func (m *EnvelopeEncryption) GetMethod() isEnvelopeEncryption_Method {
	if m != nil {
		return m.Method
	}
	return nil
}

func (x *EnvelopeEncryption) GetNone() *Empty {
	if x, ok := x.GetMethod().(*EnvelopeEncryption_None); ok {
		return x.None
	}
	return nil
}

func (x *EnvelopeEncryption) GetConversationV1() *ConversationEnvelopeEncryptionV1 {
	if x, ok := x.GetMethod().(*EnvelopeEncryption_ConversationV1); ok {
		return x.ConversationV1
	}
	return nil
}

func (x *EnvelopeEncryption) GetFideliusEncryption() *FideliusEncryption {
	if x, ok := x.GetMethod().(*EnvelopeEncryption_FideliusEncryption); ok {
		return x.FideliusEncryption
	}
	return nil
}

func (x *EnvelopeEncryption) GetClearTextMediaKey() *ClearTextMediaKeyEncryption {
	if x, ok := x.GetMethod().(*EnvelopeEncryption_ClearTextMediaKey); ok {
		return x.ClearTextMediaKey
	}
	return nil
}

func (x *EnvelopeEncryption) GetEelEncryption() *EelEncryption {
	if x, ok := x.GetMethod().(*EnvelopeEncryption_EelEncryption); ok {
		return x.EelEncryption
	}
	return nil
}

func (x *EnvelopeEncryption) GetClearTextEelKeyEncryption() *ClearTextEelKeyEncryption {
	if x, ok := x.GetMethod().(*EnvelopeEncryption_ClearTextEelKeyEncryption); ok {
		return x.ClearTextEelKeyEncryption
	}
	return nil
}

type isEnvelopeEncryption_Method interface {
	isEnvelopeEncryption_Method()
}

type EnvelopeEncryption_None struct {
	None *Empty `protobuf:"bytes,1,opt,name=none,proto3,oneof"`
}

type EnvelopeEncryption_ConversationV1 struct {
	ConversationV1 *ConversationEnvelopeEncryptionV1 `protobuf:"bytes,2,opt,name=conversationV1,proto3,oneof"`
}

type EnvelopeEncryption_FideliusEncryption struct {
	FideliusEncryption *FideliusEncryption `protobuf:"bytes,3,opt,name=fideliusEncryption,proto3,oneof"`
}

type EnvelopeEncryption_ClearTextMediaKey struct {
	ClearTextMediaKey *ClearTextMediaKeyEncryption `protobuf:"bytes,4,opt,name=clearTextMediaKey,proto3,oneof"`
}

type EnvelopeEncryption_EelEncryption struct {
	EelEncryption *EelEncryption `protobuf:"bytes,5,opt,name=eelEncryption,proto3,oneof"`
}

type EnvelopeEncryption_ClearTextEelKeyEncryption struct {
	ClearTextEelKeyEncryption *ClearTextEelKeyEncryption `protobuf:"bytes,6,opt,name=clearTextEelKeyEncryption,proto3,oneof"`
}

func (*EnvelopeEncryption_None) isEnvelopeEncryption_Method() {}

func (*EnvelopeEncryption_ConversationV1) isEnvelopeEncryption_Method() {}

func (*EnvelopeEncryption_FideliusEncryption) isEnvelopeEncryption_Method() {}

func (*EnvelopeEncryption_ClearTextMediaKey) isEnvelopeEncryption_Method() {}

func (*EnvelopeEncryption_EelEncryption) isEnvelopeEncryption_Method() {}

func (*EnvelopeEncryption_ClearTextEelKeyEncryption) isEnvelopeEncryption_Method() {}

type ClearTextEelKeyEncryption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CekIv []byte `protobuf:"bytes,1,opt,name=cekIv,proto3" json:"cekIv,omitempty"`
	Cek   []byte `protobuf:"bytes,2,opt,name=cek,proto3" json:"cek,omitempty"`
}

func (x *ClearTextEelKeyEncryption) Reset() {
	*x = ClearTextEelKeyEncryption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearTextEelKeyEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearTextEelKeyEncryption) ProtoMessage() {}

func (x *ClearTextEelKeyEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearTextEelKeyEncryption.ProtoReflect.Descriptor instead.
func (*ClearTextEelKeyEncryption) Descriptor() ([]byte, []int) {
	return file_crypto_proto_rawDescGZIP(), []int{1}
}

func (x *ClearTextEelKeyEncryption) GetCekIv() []byte {
	if x != nil {
		return x.CekIv
	}
	return nil
}

func (x *ClearTextEelKeyEncryption) GetCek() []byte {
	if x != nil {
		return x.Cek
	}
	return nil
}

type ClearTextMediaKeyEncryption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaKey []byte `protobuf:"bytes,1,opt,name=mediaKey,proto3" json:"mediaKey,omitempty"`
	MediaIv  []byte `protobuf:"bytes,2,opt,name=mediaIv,proto3" json:"mediaIv,omitempty"`
}

func (x *ClearTextMediaKeyEncryption) Reset() {
	*x = ClearTextMediaKeyEncryption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearTextMediaKeyEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearTextMediaKeyEncryption) ProtoMessage() {}

func (x *ClearTextMediaKeyEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearTextMediaKeyEncryption.ProtoReflect.Descriptor instead.
func (*ClearTextMediaKeyEncryption) Descriptor() ([]byte, []int) {
	return file_crypto_proto_rawDescGZIP(), []int{2}
}

func (x *ClearTextMediaKeyEncryption) GetMediaKey() []byte {
	if x != nil {
		return x.MediaKey
	}
	return nil
}

func (x *ClearTextMediaKeyEncryption) GetMediaIv() []byte {
	if x != nil {
		return x.MediaIv
	}
	return nil
}

type FideliusEncryption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapKey               []byte                   `protobuf:"bytes,1,opt,name=snapKey,proto3" json:"snapKey,omitempty"`
	SnapIv                []byte                   `protobuf:"bytes,2,opt,name=snapIv,proto3" json:"snapIv,omitempty"`
	Retried               bool                     `protobuf:"varint,3,opt,name=retried,proto3" json:"retried,omitempty"`
	Version               int32                    `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	SenderOutBeta         []byte                   `protobuf:"bytes,5,opt,name=senderOutBeta,proto3" json:"senderOutBeta,omitempty"`
	FideliusRecipientInfo []*FideliusRecipientInfo `protobuf:"bytes,6,rep,name=fideliusRecipientInfo,proto3" json:"fideliusRecipientInfo,omitempty"`
}

func (x *FideliusEncryption) Reset() {
	*x = FideliusEncryption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FideliusEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FideliusEncryption) ProtoMessage() {}

func (x *FideliusEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FideliusEncryption.ProtoReflect.Descriptor instead.
func (*FideliusEncryption) Descriptor() ([]byte, []int) {
	return file_crypto_proto_rawDescGZIP(), []int{3}
}

func (x *FideliusEncryption) GetSnapKey() []byte {
	if x != nil {
		return x.SnapKey
	}
	return nil
}

func (x *FideliusEncryption) GetSnapIv() []byte {
	if x != nil {
		return x.SnapIv
	}
	return nil
}

func (x *FideliusEncryption) GetRetried() bool {
	if x != nil {
		return x.Retried
	}
	return false
}

func (x *FideliusEncryption) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FideliusEncryption) GetSenderOutBeta() []byte {
	if x != nil {
		return x.SenderOutBeta
	}
	return nil
}

func (x *FideliusEncryption) GetFideliusRecipientInfo() []*FideliusRecipientInfo {
	if x != nil {
		return x.FideliusRecipientInfo
	}
	return nil
}

type FideliusRecipientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipientKey     []byte `protobuf:"bytes,1,opt,name=recipientKey,proto3" json:"recipientKey,omitempty"`
	Na               []byte `protobuf:"bytes,2,opt,name=na,proto3" json:"na,omitempty"`
	Phi              []byte `protobuf:"bytes,3,opt,name=phi,proto3" json:"phi,omitempty"`
	Tag              []byte `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
	SenderUserId     *UUID  `protobuf:"bytes,5,opt,name=senderUserId,proto3" json:"senderUserId,omitempty"`
	RecipientUserId  *UUID  `protobuf:"bytes,6,opt,name=recipientUserId,proto3" json:"recipientUserId,omitempty"`
	RecipientVersion int32  `protobuf:"varint,7,opt,name=recipientVersion,proto3" json:"recipientVersion,omitempty"`
}

func (x *FideliusRecipientInfo) Reset() {
	*x = FideliusRecipientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FideliusRecipientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FideliusRecipientInfo) ProtoMessage() {}

func (x *FideliusRecipientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FideliusRecipientInfo.ProtoReflect.Descriptor instead.
func (*FideliusRecipientInfo) Descriptor() ([]byte, []int) {
	return file_crypto_proto_rawDescGZIP(), []int{4}
}

func (x *FideliusRecipientInfo) GetRecipientKey() []byte {
	if x != nil {
		return x.RecipientKey
	}
	return nil
}

func (x *FideliusRecipientInfo) GetNa() []byte {
	if x != nil {
		return x.Na
	}
	return nil
}

func (x *FideliusRecipientInfo) GetPhi() []byte {
	if x != nil {
		return x.Phi
	}
	return nil
}

func (x *FideliusRecipientInfo) GetTag() []byte {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *FideliusRecipientInfo) GetSenderUserId() *UUID {
	if x != nil {
		return x.SenderUserId
	}
	return nil
}

func (x *FideliusRecipientInfo) GetRecipientUserId() *UUID {
	if x != nil {
		return x.RecipientUserId
	}
	return nil
}

func (x *FideliusRecipientInfo) GetRecipientVersion() int32 {
	if x != nil {
		return x.RecipientVersion
	}
	return 0
}

type ConversationEnvelopeEncryptionV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iv    []byte `protobuf:"bytes,1,opt,name=iv,proto3" json:"iv,omitempty"`
	Nonce []byte `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *ConversationEnvelopeEncryptionV1) Reset() {
	*x = ConversationEnvelopeEncryptionV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationEnvelopeEncryptionV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationEnvelopeEncryptionV1) ProtoMessage() {}

func (x *ConversationEnvelopeEncryptionV1) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationEnvelopeEncryptionV1.ProtoReflect.Descriptor instead.
func (*ConversationEnvelopeEncryptionV1) Descriptor() ([]byte, []int) {
	return file_crypto_proto_rawDescGZIP(), []int{5}
}

func (x *ConversationEnvelopeEncryptionV1) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

func (x *ConversationEnvelopeEncryptionV1) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type EelReEncryptionInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId               *UUID    `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	PublicKeyIdentifiers [][]byte `protobuf:"bytes,2,rep,name=publicKeyIdentifiers,proto3" json:"publicKeyIdentifiers,omitempty"`
}

func (x *EelReEncryptionInit) Reset() {
	*x = EelReEncryptionInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EelReEncryptionInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EelReEncryptionInit) ProtoMessage() {}

func (x *EelReEncryptionInit) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EelReEncryptionInit.ProtoReflect.Descriptor instead.
func (*EelReEncryptionInit) Descriptor() ([]byte, []int) {
	return file_crypto_proto_rawDescGZIP(), []int{6}
}

func (x *EelReEncryptionInit) GetUserId() *UUID {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *EelReEncryptionInit) GetPublicKeyIdentifiers() [][]byte {
	if x != nil {
		return x.PublicKeyIdentifiers
	}
	return nil
}

type EncryptionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Method:
	//
	//	*EncryptionInfo_NoOp
	//	*EncryptionInfo_ConversationV1
	//	*EncryptionInfo_Fidelius
	//	*EncryptionInfo_ClearTextMediaKey
	//	*EncryptionInfo_EelDestinationEncryption
	//	*EncryptionInfo_ClearTextEelKey
	Method isEncryptionInfo_Method `protobuf_oneof:"method"`
}

func (x *EncryptionInfo) Reset() {
	*x = EncryptionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionInfo) ProtoMessage() {}

func (x *EncryptionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionInfo.ProtoReflect.Descriptor instead.
func (*EncryptionInfo) Descriptor() ([]byte, []int) {
	return file_crypto_proto_rawDescGZIP(), []int{7}
}

func (m *EncryptionInfo) GetMethod() isEncryptionInfo_Method {
	if m != nil {
		return m.Method
	}
	return nil
}

func (x *EncryptionInfo) GetNoOp() *Empty {
	if x, ok := x.GetMethod().(*EncryptionInfo_NoOp); ok {
		return x.NoOp
	}
	return nil
}

func (x *EncryptionInfo) GetConversationV1() *ConversationEncryptionV1 {
	if x, ok := x.GetMethod().(*EncryptionInfo_ConversationV1); ok {
		return x.ConversationV1
	}
	return nil
}

func (x *EncryptionInfo) GetFidelius() *Empty {
	if x, ok := x.GetMethod().(*EncryptionInfo_Fidelius); ok {
		return x.Fidelius
	}
	return nil
}

func (x *EncryptionInfo) GetClearTextMediaKey() *Empty {
	if x, ok := x.GetMethod().(*EncryptionInfo_ClearTextMediaKey); ok {
		return x.ClearTextMediaKey
	}
	return nil
}

func (x *EncryptionInfo) GetEelDestinationEncryption() *EelDestinationEncryption {
	if x, ok := x.GetMethod().(*EncryptionInfo_EelDestinationEncryption); ok {
		return x.EelDestinationEncryption
	}
	return nil
}

func (x *EncryptionInfo) GetClearTextEelKey() *Empty {
	if x, ok := x.GetMethod().(*EncryptionInfo_ClearTextEelKey); ok {
		return x.ClearTextEelKey
	}
	return nil
}

type isEncryptionInfo_Method interface {
	isEncryptionInfo_Method()
}

type EncryptionInfo_NoOp struct {
	NoOp *Empty `protobuf:"bytes,1,opt,name=noOp,proto3,oneof"`
}

type EncryptionInfo_ConversationV1 struct {
	ConversationV1 *ConversationEncryptionV1 `protobuf:"bytes,2,opt,name=conversationV1,proto3,oneof"`
}

type EncryptionInfo_Fidelius struct {
	Fidelius *Empty `protobuf:"bytes,3,opt,name=fidelius,proto3,oneof"`
}

type EncryptionInfo_ClearTextMediaKey struct {
	ClearTextMediaKey *Empty `protobuf:"bytes,4,opt,name=clearTextMediaKey,proto3,oneof"`
}

type EncryptionInfo_EelDestinationEncryption struct {
	EelDestinationEncryption *EelDestinationEncryption `protobuf:"bytes,5,opt,name=eelDestinationEncryption,proto3,oneof"`
}

type EncryptionInfo_ClearTextEelKey struct {
	ClearTextEelKey *Empty `protobuf:"bytes,6,opt,name=clearTextEelKey,proto3,oneof"`
}

func (*EncryptionInfo_NoOp) isEncryptionInfo_Method() {}

func (*EncryptionInfo_ConversationV1) isEncryptionInfo_Method() {}

func (*EncryptionInfo_Fidelius) isEncryptionInfo_Method() {}

func (*EncryptionInfo_ClearTextMediaKey) isEncryptionInfo_Method() {}

func (*EncryptionInfo_EelDestinationEncryption) isEncryptionInfo_Method() {}

func (*EncryptionInfo_ClearTextEelKey) isEncryptionInfo_Method() {}

type EelDeviceEncryption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipientPublicKeyIdentifier []byte `protobuf:"bytes,1,opt,name=recipientPublicKeyIdentifier,proto3" json:"recipientPublicKeyIdentifier,omitempty"`
	RecipientVersion             int32  `protobuf:"varint,2,opt,name=recipientVersion,proto3" json:"recipientVersion,omitempty"`
	CekCiphertext                []byte `protobuf:"bytes,3,opt,name=cekCiphertext,proto3" json:"cekCiphertext,omitempty"`
}

func (x *EelDeviceEncryption) Reset() {
	*x = EelDeviceEncryption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EelDeviceEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EelDeviceEncryption) ProtoMessage() {}

func (x *EelDeviceEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EelDeviceEncryption.ProtoReflect.Descriptor instead.
func (*EelDeviceEncryption) Descriptor() ([]byte, []int) {
	return file_crypto_proto_rawDescGZIP(), []int{8}
}

func (x *EelDeviceEncryption) GetRecipientPublicKeyIdentifier() []byte {
	if x != nil {
		return x.RecipientPublicKeyIdentifier
	}
	return nil
}

func (x *EelDeviceEncryption) GetRecipientVersion() int32 {
	if x != nil {
		return x.RecipientVersion
	}
	return 0
}

func (x *EelDeviceEncryption) GetCekCiphertext() []byte {
	if x != nil {
		return x.CekCiphertext
	}
	return nil
}

type EelEncryption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CekIv           []byte `protobuf:"bytes,1,opt,name=cekIv,proto3" json:"cekIv,omitempty"`
	Nonce           []byte `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	SenderPublicKey []byte `protobuf:"bytes,3,opt,name=senderPublicKey,proto3" json:"senderPublicKey,omitempty"`
	SenderVersion   int32  `protobuf:"varint,4,opt,name=senderVersion,proto3" json:"senderVersion,omitempty"`
	Cek             []byte `protobuf:"bytes,16,opt,name=cek,proto3" json:"cek,omitempty"`
}

func (x *EelEncryption) Reset() {
	*x = EelEncryption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EelEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EelEncryption) ProtoMessage() {}

func (x *EelEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EelEncryption.ProtoReflect.Descriptor instead.
func (*EelEncryption) Descriptor() ([]byte, []int) {
	return file_crypto_proto_rawDescGZIP(), []int{9}
}

func (x *EelEncryption) GetCekIv() []byte {
	if x != nil {
		return x.CekIv
	}
	return nil
}

func (x *EelEncryption) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *EelEncryption) GetSenderPublicKey() []byte {
	if x != nil {
		return x.SenderPublicKey
	}
	return nil
}

func (x *EelEncryption) GetSenderVersion() int32 {
	if x != nil {
		return x.SenderVersion
	}
	return 0
}

func (x *EelEncryption) GetCek() []byte {
	if x != nil {
		return x.Cek
	}
	return nil
}

type OverrideEncryptorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptorPublicKey  []byte                 `protobuf:"bytes,1,opt,name=encryptorPublicKey,proto3" json:"encryptorPublicKey,omitempty"`
	EncryptorVersion    int32                  `protobuf:"varint,2,opt,name=encryptorVersion,proto3" json:"encryptorVersion,omitempty"`
	EelDeviceEncryption []*EelDeviceEncryption `protobuf:"bytes,3,rep,name=eelDeviceEncryption,proto3" json:"eelDeviceEncryption,omitempty"`
	EncryptorUserId     *UUID                  `protobuf:"bytes,4,opt,name=encryptorUserId,proto3" json:"encryptorUserId,omitempty"`
}

func (x *OverrideEncryptorInfo) Reset() {
	*x = OverrideEncryptorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverrideEncryptorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverrideEncryptorInfo) ProtoMessage() {}

func (x *OverrideEncryptorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverrideEncryptorInfo.ProtoReflect.Descriptor instead.
func (*OverrideEncryptorInfo) Descriptor() ([]byte, []int) {
	return file_crypto_proto_rawDescGZIP(), []int{10}
}

func (x *OverrideEncryptorInfo) GetEncryptorPublicKey() []byte {
	if x != nil {
		return x.EncryptorPublicKey
	}
	return nil
}

func (x *OverrideEncryptorInfo) GetEncryptorVersion() int32 {
	if x != nil {
		return x.EncryptorVersion
	}
	return 0
}

func (x *OverrideEncryptorInfo) GetEelDeviceEncryption() []*EelDeviceEncryption {
	if x != nil {
		return x.EelDeviceEncryption
	}
	return nil
}

func (x *OverrideEncryptorInfo) GetEncryptorUserId() *UUID {
	if x != nil {
		return x.EncryptorUserId
	}
	return nil
}

type EelDestinationEncryption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EelDeviceEncryptions   []*EelDeviceEncryption   `protobuf:"bytes,1,rep,name=eelDeviceEncryptions,proto3" json:"eelDeviceEncryptions,omitempty"`
	OverrideEncryptorInfos []*OverrideEncryptorInfo `protobuf:"bytes,2,rep,name=overrideEncryptorInfos,proto3" json:"overrideEncryptorInfos,omitempty"`
}

func (x *EelDestinationEncryption) Reset() {
	*x = EelDestinationEncryption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EelDestinationEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EelDestinationEncryption) ProtoMessage() {}

func (x *EelDestinationEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EelDestinationEncryption.ProtoReflect.Descriptor instead.
func (*EelDestinationEncryption) Descriptor() ([]byte, []int) {
	return file_crypto_proto_rawDescGZIP(), []int{11}
}

func (x *EelDestinationEncryption) GetEelDeviceEncryptions() []*EelDeviceEncryption {
	if x != nil {
		return x.EelDeviceEncryptions
	}
	return nil
}

func (x *EelDestinationEncryption) GetOverrideEncryptorInfos() []*OverrideEncryptorInfo {
	if x != nil {
		return x.OverrideEncryptorInfos
	}
	return nil
}

type ConversationEncryptionV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WrappedKeysByIdEntry *ConversationEncryptionV1_WrappedKeysByIdEntry `protobuf:"bytes,1,opt,name=wrappedKeysByIdEntry,proto3" json:"wrappedKeysByIdEntry,omitempty"`
	SenderKeyId          int64                                          `protobuf:"varint,2,opt,name=senderKeyId,proto3" json:"senderKeyId,omitempty"`
}

func (x *ConversationEncryptionV1) Reset() {
	*x = ConversationEncryptionV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationEncryptionV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationEncryptionV1) ProtoMessage() {}

func (x *ConversationEncryptionV1) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationEncryptionV1.ProtoReflect.Descriptor instead.
func (*ConversationEncryptionV1) Descriptor() ([]byte, []int) {
	return file_crypto_proto_rawDescGZIP(), []int{12}
}

func (x *ConversationEncryptionV1) GetWrappedKeysByIdEntry() *ConversationEncryptionV1_WrappedKeysByIdEntry {
	if x != nil {
		return x.WrappedKeysByIdEntry
	}
	return nil
}

func (x *ConversationEncryptionV1) GetSenderKeyId() int64 {
	if x != nil {
		return x.SenderKeyId
	}
	return 0
}

type ConversationEncryptionV1_WrappedKeysByIdEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   int64                             `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *ConversationEncryptionV1_KeyInfo `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ConversationEncryptionV1_WrappedKeysByIdEntry) Reset() {
	*x = ConversationEncryptionV1_WrappedKeysByIdEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationEncryptionV1_WrappedKeysByIdEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationEncryptionV1_WrappedKeysByIdEntry) ProtoMessage() {}

func (x *ConversationEncryptionV1_WrappedKeysByIdEntry) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationEncryptionV1_WrappedKeysByIdEntry.ProtoReflect.Descriptor instead.
func (*ConversationEncryptionV1_WrappedKeysByIdEntry) Descriptor() ([]byte, []int) {
	return file_crypto_proto_rawDescGZIP(), []int{13}
}

func (x *ConversationEncryptionV1_WrappedKeysByIdEntry) GetKey() int64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *ConversationEncryptionV1_WrappedKeysByIdEntry) GetValue() *ConversationEncryptionV1_KeyInfo {
	if x != nil {
		return x.Value
	}
	return nil
}

type ConversationEncryptionV1_KeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WrappedKey []byte `protobuf:"bytes,1,opt,name=wrappedKey,proto3" json:"wrappedKey,omitempty"`
	Version    int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ConversationEncryptionV1_KeyInfo) Reset() {
	*x = ConversationEncryptionV1_KeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationEncryptionV1_KeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationEncryptionV1_KeyInfo) ProtoMessage() {}

func (x *ConversationEncryptionV1_KeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationEncryptionV1_KeyInfo.ProtoReflect.Descriptor instead.
func (*ConversationEncryptionV1_KeyInfo) Descriptor() ([]byte, []int) {
	return file_crypto_proto_rawDescGZIP(), []int{14}
}

func (x *ConversationEncryptionV1_KeyInfo) GetWrappedKey() []byte {
	if x != nil {
		return x.WrappedKey
	}
	return nil
}

func (x *ConversationEncryptionV1_KeyInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type MediaEncryptionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Iv  []byte `protobuf:"bytes,2,opt,name=iv,proto3" json:"iv,omitempty"`
}

func (x *MediaEncryptionInfo) Reset() {
	*x = MediaEncryptionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaEncryptionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaEncryptionInfo) ProtoMessage() {}

func (x *MediaEncryptionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaEncryptionInfo.ProtoReflect.Descriptor instead.
func (*MediaEncryptionInfo) Descriptor() ([]byte, []int) {
	return file_crypto_proto_rawDescGZIP(), []int{15}
}

func (x *MediaEncryptionInfo) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MediaEncryptionInfo) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

type AddEelReEncryptionInit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKeyIdentifier []byte `protobuf:"bytes,1,opt,name=publicKeyIdentifier,proto3" json:"publicKeyIdentifier,omitempty"`
}

func (x *AddEelReEncryptionInit) Reset() {
	*x = AddEelReEncryptionInit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddEelReEncryptionInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEelReEncryptionInit) ProtoMessage() {}

func (x *AddEelReEncryptionInit) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEelReEncryptionInit.ProtoReflect.Descriptor instead.
func (*AddEelReEncryptionInit) Descriptor() ([]byte, []int) {
	return file_crypto_proto_rawDescGZIP(), []int{16}
}

func (x *AddEelReEncryptionInit) GetPublicKeyIdentifier() []byte {
	if x != nil {
		return x.PublicKeyIdentifier
	}
	return nil
}

type AppendEelReEncryptionDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcknowledgedRequests        []*EelReEncryptionInit    `protobuf:"bytes,1,rep,name=acknowledgedRequests,proto3" json:"acknowledgedRequests,omitempty"`
	NewEelDestinationEncryption *EelDestinationEncryption `protobuf:"bytes,2,opt,name=newEelDestinationEncryption,proto3" json:"newEelDestinationEncryption,omitempty"`
}

func (x *AppendEelReEncryptionDestination) Reset() {
	*x = AppendEelReEncryptionDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_crypto_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppendEelReEncryptionDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppendEelReEncryptionDestination) ProtoMessage() {}

func (x *AppendEelReEncryptionDestination) ProtoReflect() protoreflect.Message {
	mi := &file_crypto_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppendEelReEncryptionDestination.ProtoReflect.Descriptor instead.
func (*AppendEelReEncryptionDestination) Descriptor() ([]byte, []int) {
	return file_crypto_proto_rawDescGZIP(), []int{17}
}

func (x *AppendEelReEncryptionDestination) GetAcknowledgedRequests() []*EelReEncryptionInit {
	if x != nil {
		return x.AcknowledgedRequests
	}
	return nil
}

func (x *AppendEelReEncryptionDestination) GetNewEelDestinationEncryption() *EelDestinationEncryption {
	if x != nil {
		return x.NewEelDestinationEncryption
	}
	return nil
}

var File_crypto_proto protoreflect.FileDescriptor

var file_crypto_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x1a, 0x0a, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xdc, 0x03, 0x0a, 0x12, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x12, 0x52, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x48, 0x00,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31,
	0x12, 0x4c, 0x0a, 0x12, 0x66, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x75, 0x73, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x75, 0x73, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x66, 0x69, 0x64, 0x65,
	0x6c, 0x69, 0x75, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53,
	0x0a, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x4b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x0d, 0x65, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x45, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x19, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x65, 0x78, 0x74, 0x45,
	0x65, 0x6c, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x54, 0x65, 0x78, 0x74, 0x45, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x19, 0x63, 0x6c, 0x65, 0x61,
	0x72, 0x54, 0x65, 0x78, 0x74, 0x45, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22,
	0x43, 0x0a, 0x19, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x65, 0x78, 0x74, 0x45, 0x65, 0x6c, 0x4b,
	0x65, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x65, 0x6b, 0x49, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x63, 0x65, 0x6b,
	0x49, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x65, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x63, 0x65, 0x6b, 0x22, 0x53, 0x0a, 0x1b, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x65, 0x78,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x76, 0x22, 0xf5, 0x01, 0x0a, 0x12, 0x46, 0x69,
	0x64, 0x65, 0x6c, 0x69, 0x75, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x6e, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x73, 0x6e, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6e,
	0x61, 0x70, 0x49, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x6e, 0x61, 0x70,
	0x49, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x4f, 0x75, 0x74, 0x42, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x42, 0x65, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x15,
	0x66, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x75, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x75, 0x73, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x66, 0x69, 0x64, 0x65,
	0x6c, 0x69, 0x75, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x81, 0x02, 0x0a, 0x15, 0x46, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x75, 0x73, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x6e, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x6e, 0x61, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x68, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x70, 0x68,
	0x69, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x75, 0x69, 0x64,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75,
	0x75, 0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x76, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22,
	0x6d, 0x0a, 0x13, 0x45, 0x65, 0x6c, 0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x92,
	0x03, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x6f, 0x4f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x04, 0x6e, 0x6f, 0x4f, 0x70, 0x12, 0x4a, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31,
	0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x31, 0x12, 0x2b, 0x0a, 0x08, 0x66, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x75, 0x73, 0x12,
	0x3d, 0x0a, 0x11, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6c, 0x65,
	0x61, 0x72, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4b, 0x65, 0x79, 0x12, 0x5e,
	0x0a, 0x18, 0x65, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x45, 0x65, 0x6c, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x65, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x65, 0x78, 0x74, 0x45, 0x65, 0x6c, 0x4b, 0x65,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x54,
	0x65, 0x78, 0x74, 0x45, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x45, 0x65, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x1c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x65, 0x6b, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x63, 0x65, 0x6b, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x9d, 0x01, 0x0a, 0x0d, 0x45, 0x65, 0x6c, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x65, 0x6b, 0x49, 0x76, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x63, 0x65, 0x6b, 0x49, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x65, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x63, 0x65,
	0x6b, 0x22, 0xf8, 0x01, 0x0a, 0x15, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x12, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x13, 0x65, 0x65, 0x6c, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x45, 0x65,
	0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x65, 0x65, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc2, 0x01, 0x0a,
	0x18, 0x45, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x14, 0x65, 0x65, 0x6c,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x45, 0x65, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x65, 0x65, 0x6c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x16, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x22, 0xa7, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x12, 0x69,
	0x0a, 0x14, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x79, 0x49,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x5f, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x79, 0x49, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x14, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73,
	0x42, 0x79, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x2d,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x5f, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x4b, 0x65, 0x79, 0x73, 0x42, 0x79, 0x49, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31,
	0x5f, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x5c, 0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x31, 0x5f, 0x4b, 0x65, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a,
	0x13, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x76, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x69, 0x76, 0x22, 0x4a, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x45, 0x65, 0x6c,
	0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74,
	0x12, 0x30, 0x0a, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x22, 0xd7, 0x01, 0x0a, 0x20, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x45, 0x65, 0x6c,
	0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x14, 0x61, 0x63, 0x6b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x45,
	0x65, 0x6c, 0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x69, 0x74, 0x52, 0x14, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x62, 0x0a, 0x1b, 0x6e, 0x65, 0x77, 0x45,
	0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x45, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x1b, 0x6e, 0x65, 0x77, 0x45, 0x65, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x5a, 0x09,
	0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_crypto_proto_rawDescOnce sync.Once
	file_crypto_proto_rawDescData = file_crypto_proto_rawDesc
)

func file_crypto_proto_rawDescGZIP() []byte {
	file_crypto_proto_rawDescOnce.Do(func() {
		file_crypto_proto_rawDescData = protoimpl.X.CompressGZIP(file_crypto_proto_rawDescData)
	})
	return file_crypto_proto_rawDescData
}

var file_crypto_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_crypto_proto_goTypes = []interface{}{
	(*EnvelopeEncryption)(nil),                            // 0: crypto.EnvelopeEncryption
	(*ClearTextEelKeyEncryption)(nil),                     // 1: crypto.ClearTextEelKeyEncryption
	(*ClearTextMediaKeyEncryption)(nil),                   // 2: crypto.ClearTextMediaKeyEncryption
	(*FideliusEncryption)(nil),                            // 3: crypto.FideliusEncryption
	(*FideliusRecipientInfo)(nil),                         // 4: crypto.FideliusRecipientInfo
	(*ConversationEnvelopeEncryptionV1)(nil),              // 5: crypto.ConversationEnvelopeEncryptionV1
	(*EelReEncryptionInit)(nil),                           // 6: crypto.EelReEncryptionInit
	(*EncryptionInfo)(nil),                                // 7: crypto.EncryptionInfo
	(*EelDeviceEncryption)(nil),                           // 8: crypto.EelDeviceEncryption
	(*EelEncryption)(nil),                                 // 9: crypto.EelEncryption
	(*OverrideEncryptorInfo)(nil),                         // 10: crypto.OverrideEncryptorInfo
	(*EelDestinationEncryption)(nil),                      // 11: crypto.EelDestinationEncryption
	(*ConversationEncryptionV1)(nil),                      // 12: crypto.ConversationEncryptionV1
	(*ConversationEncryptionV1_WrappedKeysByIdEntry)(nil), // 13: crypto.ConversationEncryptionV1_WrappedKeysByIdEntry
	(*ConversationEncryptionV1_KeyInfo)(nil),              // 14: crypto.ConversationEncryptionV1_KeyInfo
	(*MediaEncryptionInfo)(nil),                           // 15: crypto.MediaEncryptionInfo
	(*AddEelReEncryptionInit)(nil),                        // 16: crypto.AddEelReEncryptionInit
	(*AppendEelReEncryptionDestination)(nil),              // 17: crypto.AppendEelReEncryptionDestination
	(*Empty)(nil),                                         // 18: common.Empty
	(*UUID)(nil),                                          // 19: uuid.UUID
}
var file_crypto_proto_depIdxs = []int32{
	18, // 0: crypto.EnvelopeEncryption.none:type_name -> common.Empty
	5,  // 1: crypto.EnvelopeEncryption.conversationV1:type_name -> crypto.ConversationEnvelopeEncryptionV1
	3,  // 2: crypto.EnvelopeEncryption.fideliusEncryption:type_name -> crypto.FideliusEncryption
	2,  // 3: crypto.EnvelopeEncryption.clearTextMediaKey:type_name -> crypto.ClearTextMediaKeyEncryption
	9,  // 4: crypto.EnvelopeEncryption.eelEncryption:type_name -> crypto.EelEncryption
	1,  // 5: crypto.EnvelopeEncryption.clearTextEelKeyEncryption:type_name -> crypto.ClearTextEelKeyEncryption
	4,  // 6: crypto.FideliusEncryption.fideliusRecipientInfo:type_name -> crypto.FideliusRecipientInfo
	19, // 7: crypto.FideliusRecipientInfo.senderUserId:type_name -> uuid.UUID
	19, // 8: crypto.FideliusRecipientInfo.recipientUserId:type_name -> uuid.UUID
	19, // 9: crypto.EelReEncryptionInit.userId:type_name -> uuid.UUID
	18, // 10: crypto.EncryptionInfo.noOp:type_name -> common.Empty
	12, // 11: crypto.EncryptionInfo.conversationV1:type_name -> crypto.ConversationEncryptionV1
	18, // 12: crypto.EncryptionInfo.fidelius:type_name -> common.Empty
	18, // 13: crypto.EncryptionInfo.clearTextMediaKey:type_name -> common.Empty
	11, // 14: crypto.EncryptionInfo.eelDestinationEncryption:type_name -> crypto.EelDestinationEncryption
	18, // 15: crypto.EncryptionInfo.clearTextEelKey:type_name -> common.Empty
	8,  // 16: crypto.OverrideEncryptorInfo.eelDeviceEncryption:type_name -> crypto.EelDeviceEncryption
	19, // 17: crypto.OverrideEncryptorInfo.encryptorUserId:type_name -> uuid.UUID
	8,  // 18: crypto.EelDestinationEncryption.eelDeviceEncryptions:type_name -> crypto.EelDeviceEncryption
	10, // 19: crypto.EelDestinationEncryption.overrideEncryptorInfos:type_name -> crypto.OverrideEncryptorInfo
	13, // 20: crypto.ConversationEncryptionV1.wrappedKeysByIdEntry:type_name -> crypto.ConversationEncryptionV1_WrappedKeysByIdEntry
	14, // 21: crypto.ConversationEncryptionV1_WrappedKeysByIdEntry.value:type_name -> crypto.ConversationEncryptionV1_KeyInfo
	6,  // 22: crypto.AppendEelReEncryptionDestination.acknowledgedRequests:type_name -> crypto.EelReEncryptionInit
	11, // 23: crypto.AppendEelReEncryptionDestination.newEelDestinationEncryption:type_name -> crypto.EelDestinationEncryption
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_crypto_proto_init() }
func file_crypto_proto_init() {
	if File_crypto_proto != nil {
		return
	}
	file_uuid_proto_init()
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_crypto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvelopeEncryption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearTextEelKeyEncryption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearTextMediaKeyEncryption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FideliusEncryption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FideliusRecipientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationEnvelopeEncryptionV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EelReEncryptionInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EelDeviceEncryption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EelEncryption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverrideEncryptorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EelDestinationEncryption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationEncryptionV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationEncryptionV1_WrappedKeysByIdEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationEncryptionV1_KeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaEncryptionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddEelReEncryptionInit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_crypto_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppendEelReEncryptionDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_crypto_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*EnvelopeEncryption_None)(nil),
		(*EnvelopeEncryption_ConversationV1)(nil),
		(*EnvelopeEncryption_FideliusEncryption)(nil),
		(*EnvelopeEncryption_ClearTextMediaKey)(nil),
		(*EnvelopeEncryption_EelEncryption)(nil),
		(*EnvelopeEncryption_ClearTextEelKeyEncryption)(nil),
	}
	file_crypto_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*EncryptionInfo_NoOp)(nil),
		(*EncryptionInfo_ConversationV1)(nil),
		(*EncryptionInfo_Fidelius)(nil),
		(*EncryptionInfo_ClearTextMediaKey)(nil),
		(*EncryptionInfo_EelDestinationEncryption)(nil),
		(*EncryptionInfo_ClearTextEelKey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_crypto_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_crypto_proto_goTypes,
		DependencyIndexes: file_crypto_proto_depIdxs,
		MessageInfos:      file_crypto_proto_msgTypes,
	}.Build()
	File_crypto_proto = out.File
	file_crypto_proto_rawDesc = nil
	file_crypto_proto_goTypes = nil
	file_crypto_proto_depIdxs = nil
}
