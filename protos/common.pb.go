// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: common.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConversationType int32

const (
	ConversationType_ONE_ON_ONE         ConversationType = 0
	ConversationType_USER_CREATED_GROUP ConversationType = 1
)

// Enum value maps for ConversationType.
var (
	ConversationType_name = map[int32]string{
		0: "ONE_ON_ONE",
		1: "USER_CREATED_GROUP",
	}
	ConversationType_value = map[string]int32{
		"ONE_ON_ONE":         0,
		"USER_CREATED_GROUP": 1,
	}
)

func (x ConversationType) Enum() *ConversationType {
	p := new(ConversationType)
	*p = x
	return p
}

func (x ConversationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (ConversationType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x ConversationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationType.Descriptor instead.
func (ConversationType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

type AssetType int32

const (
	AssetType_ASSET_TYPE_UNSET  AssetType = 0
	AssetType_BLOOPS_STICKER    AssetType = 1
	AssetType_MUSIC             AssetType = 2
	AssetType_RAW_MEDIA         AssetType = 3
	AssetType_CANVAS_STICKER    AssetType = 4
	AssetType_BASE_MEDIA        AssetType = 5
	AssetType_OVERLAY           AssetType = 6
	AssetType_EDITS             AssetType = 7
	AssetType_FIRST_FRAME       AssetType = 8
	AssetType_THUMBNAIL         AssetType = 9
	AssetType_CAMEO             AssetType = 10
	AssetType_WEB_THUMBNAIL     AssetType = 11
	AssetType_WEB_MEDIA         AssetType = 12
	AssetType_LENS_ASSET        AssetType = 13
	AssetType_VOICEOVER         AssetType = 14
	AssetType_AVATAR_IMAGE      AssetType = 15
	AssetType_SPECTACLES_SIXDOF AssetType = 16
	AssetType_PLAIN_MEDIA       AssetType = 17
)

// Enum value maps for AssetType.
var (
	AssetType_name = map[int32]string{
		0:  "ASSET_TYPE_UNSET",
		1:  "BLOOPS_STICKER",
		2:  "MUSIC",
		3:  "RAW_MEDIA",
		4:  "CANVAS_STICKER",
		5:  "BASE_MEDIA",
		6:  "OVERLAY",
		7:  "EDITS",
		8:  "FIRST_FRAME",
		9:  "THUMBNAIL",
		10: "CAMEO",
		11: "WEB_THUMBNAIL",
		12: "WEB_MEDIA",
		13: "LENS_ASSET",
		14: "VOICEOVER",
		15: "AVATAR_IMAGE",
		16: "SPECTACLES_SIXDOF",
		17: "PLAIN_MEDIA",
	}
	AssetType_value = map[string]int32{
		"ASSET_TYPE_UNSET":  0,
		"BLOOPS_STICKER":    1,
		"MUSIC":             2,
		"RAW_MEDIA":         3,
		"CANVAS_STICKER":    4,
		"BASE_MEDIA":        5,
		"OVERLAY":           6,
		"EDITS":             7,
		"FIRST_FRAME":       8,
		"THUMBNAIL":         9,
		"CAMEO":             10,
		"WEB_THUMBNAIL":     11,
		"WEB_MEDIA":         12,
		"LENS_ASSET":        13,
		"VOICEOVER":         14,
		"AVATAR_IMAGE":      15,
		"SPECTACLES_SIXDOF": 16,
		"PLAIN_MEDIA":       17,
	}
)

func (x AssetType) Enum() *AssetType {
	p := new(AssetType)
	*p = x
	return p
}

func (x AssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (AssetType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x AssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssetType.Descriptor instead.
func (AssetType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

type DynamicUrlType int32

const (
	DynamicUrlType_NONE    DynamicUrlType = 0
	DynamicUrlType_BITMOJI DynamicUrlType = 1
)

// Enum value maps for DynamicUrlType.
var (
	DynamicUrlType_name = map[int32]string{
		0: "NONE",
		1: "BITMOJI",
	}
	DynamicUrlType_value = map[string]int32{
		"NONE":    0,
		"BITMOJI": 1,
	}
)

func (x DynamicUrlType) Enum() *DynamicUrlType {
	p := new(DynamicUrlType)
	*p = x
	return p
}

func (x DynamicUrlType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DynamicUrlType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (DynamicUrlType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x DynamicUrlType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DynamicUrlType.Descriptor instead.
func (DynamicUrlType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

type ContentType int32

const (
	ContentType_SNAP                                   ContentType = 0
	ContentType_CHAT                                   ContentType = 1
	ContentType_EXTERNAL_MEDIA                         ContentType = 2
	ContentType_SHARE                                  ContentType = 3
	ContentType_NOTE                                   ContentType = 4
	ContentType_STICKER                                ContentType = 5
	ContentType_STATUS                                 ContentType = 6
	ContentType_LOCATION2                              ContentType = 7 // ? skip
	ContentType_LOCATION                               ContentType = 8
	ContentType_STATUS_SAVE_TO_CAMERA_ROLL             ContentType = 9
	ContentType_STATUS_CONVERSATION_CAPTURE_SCREENSHOT ContentType = 10
	ContentType_STATUS_CONVERSATION_CAPTURE_RECORD     ContentType = 11
	ContentType_STATUS_CALL_MISSED_VIDEO               ContentType = 12
	ContentType_STATUS_CALL_MISSED_AUDIO               ContentType = 13
	ContentType_STATUS_INVITE_LINK_CHANGE              ContentType = 14
	ContentType_CANVAS_APP                             ContentType = 15
	ContentType_LIVE_LOCATION_SHARE                    ContentType = 16
	ContentType_CREATIVE_TOOL_ITEM                     ContentType = 17
	ContentType_FAMILY_CENTER_INVITE                   ContentType = 18
	ContentType_FAMILY_CENTER_ACCEPT                   ContentType = 19
	ContentType_FAMILY_CENTER_LEAVE                    ContentType = 20
	ContentType_SNAP_NOT_VIEWABLE                      ContentType = 21
	ContentType_STATUS_PLUS_GIFT                       ContentType = 22
	ContentType_NON_PARTICIPANT_BOT_RESPONSE           ContentType = 23
)

// Enum value maps for ContentType.
var (
	ContentType_name = map[int32]string{
		0:  "SNAP",
		1:  "CHAT",
		2:  "EXTERNAL_MEDIA",
		3:  "SHARE",
		4:  "NOTE",
		5:  "STICKER",
		6:  "STATUS",
		7:  "LOCATION2",
		8:  "LOCATION",
		9:  "STATUS_SAVE_TO_CAMERA_ROLL",
		10: "STATUS_CONVERSATION_CAPTURE_SCREENSHOT",
		11: "STATUS_CONVERSATION_CAPTURE_RECORD",
		12: "STATUS_CALL_MISSED_VIDEO",
		13: "STATUS_CALL_MISSED_AUDIO",
		14: "STATUS_INVITE_LINK_CHANGE",
		15: "CANVAS_APP",
		16: "LIVE_LOCATION_SHARE",
		17: "CREATIVE_TOOL_ITEM",
		18: "FAMILY_CENTER_INVITE",
		19: "FAMILY_CENTER_ACCEPT",
		20: "FAMILY_CENTER_LEAVE",
		21: "SNAP_NOT_VIEWABLE",
		22: "STATUS_PLUS_GIFT",
		23: "NON_PARTICIPANT_BOT_RESPONSE",
	}
	ContentType_value = map[string]int32{
		"SNAP":                                   0,
		"CHAT":                                   1,
		"EXTERNAL_MEDIA":                         2,
		"SHARE":                                  3,
		"NOTE":                                   4,
		"STICKER":                                5,
		"STATUS":                                 6,
		"LOCATION2":                              7,
		"LOCATION":                               8,
		"STATUS_SAVE_TO_CAMERA_ROLL":             9,
		"STATUS_CONVERSATION_CAPTURE_SCREENSHOT": 10,
		"STATUS_CONVERSATION_CAPTURE_RECORD":     11,
		"STATUS_CALL_MISSED_VIDEO":               12,
		"STATUS_CALL_MISSED_AUDIO":               13,
		"STATUS_INVITE_LINK_CHANGE":              14,
		"CANVAS_APP":                             15,
		"LIVE_LOCATION_SHARE":                    16,
		"CREATIVE_TOOL_ITEM":                     17,
		"FAMILY_CENTER_INVITE":                   18,
		"FAMILY_CENTER_ACCEPT":                   19,
		"FAMILY_CENTER_LEAVE":                    20,
		"SNAP_NOT_VIEWABLE":                      21,
		"STATUS_PLUS_GIFT":                       22,
		"NON_PARTICIPANT_BOT_RESPONSE":           23,
	}
)

func (x ContentType) Enum() *ContentType {
	p := new(ContentType)
	*p = x
	return p
}

func (x ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[3].Descriptor()
}

func (ContentType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[3]
}

func (x ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentType.Descriptor instead.
func (ContentType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

type CustomizedTTL int32

const (
	CustomizedTTL_CUSTOMIZED_TTL_UNSET CustomizedTTL = 0
	CustomizedTTL_ONE_HOUR             CustomizedTTL = 1
	CustomizedTTL_SIX_HOURS            CustomizedTTL = 6
	CustomizedTTL_TWELVE_HOURS         CustomizedTTL = 12
	CustomizedTTL_ONE_DAY              CustomizedTTL = 101
	CustomizedTTL_TWO_DAYS             CustomizedTTL = 102
	CustomizedTTL_THREE_DAYS           CustomizedTTL = 103
	CustomizedTTL_ONE_WEEK             CustomizedTTL = 201
)

// Enum value maps for CustomizedTTL.
var (
	CustomizedTTL_name = map[int32]string{
		0:   "CUSTOMIZED_TTL_UNSET",
		1:   "ONE_HOUR",
		6:   "SIX_HOURS",
		12:  "TWELVE_HOURS",
		101: "ONE_DAY",
		102: "TWO_DAYS",
		103: "THREE_DAYS",
		201: "ONE_WEEK",
	}
	CustomizedTTL_value = map[string]int32{
		"CUSTOMIZED_TTL_UNSET": 0,
		"ONE_HOUR":             1,
		"SIX_HOURS":            6,
		"TWELVE_HOURS":         12,
		"ONE_DAY":              101,
		"TWO_DAYS":             102,
		"THREE_DAYS":           103,
		"ONE_WEEK":             201,
	}
)

func (x CustomizedTTL) Enum() *CustomizedTTL {
	p := new(CustomizedTTL)
	*p = x
	return p
}

func (x CustomizedTTL) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomizedTTL) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[4].Descriptor()
}

func (CustomizedTTL) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[4]
}

func (x CustomizedTTL) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomizedTTL.Descriptor instead.
func (CustomizedTTL) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

type Corpus int32

const (
	Corpus_CORPUS_UNSET Corpus = 0
	Corpus_CORPUS_URL   Corpus = 1
)

// Enum value maps for Corpus.
var (
	Corpus_name = map[int32]string{
		0: "CORPUS_UNSET",
		1: "CORPUS_URL",
	}
	Corpus_value = map[string]int32{
		"CORPUS_UNSET": 0,
		"CORPUS_URL":   1,
	}
)

func (x Corpus) Enum() *Corpus {
	p := new(Corpus)
	*p = x
	return p
}

func (x Corpus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Corpus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[5].Descriptor()
}

func (Corpus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[5]
}

func (x Corpus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Corpus.Descriptor instead.
func (Corpus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

type SnapViewability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SnapPostOpenViewingPolicy SnapPostOpenViewingPolicy `protobuf:"varint,1,opt,name=snapPostOpenViewingPolicy,proto3,enum=policy.SnapPostOpenViewingPolicy" json:"snapPostOpenViewingPolicy,omitempty"`
}

func (x *SnapViewability) Reset() {
	*x = SnapViewability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapViewability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapViewability) ProtoMessage() {}

func (x *SnapViewability) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapViewability.ProtoReflect.Descriptor instead.
func (*SnapViewability) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *SnapViewability) GetSnapPostOpenViewingPolicy() SnapPostOpenViewingPolicy {
	if x != nil {
		return x.SnapPostOpenViewingPolicy
	}
	return SnapPostOpenViewingPolicy_POLICY_UNSET_OR_ENVELOPE
}

type MentionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MentionedUserIds []*UUID `protobuf:"bytes,1,rep,name=mentionedUserIds,proto3" json:"mentionedUserIds,omitempty"`
}

func (x *MentionInfo) Reset() {
	*x = MentionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MentionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MentionInfo) ProtoMessage() {}

func (x *MentionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MentionInfo.ProtoReflect.Descriptor instead.
func (*MentionInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *MentionInfo) GetMentionedUserIds() []*UUID {
	if x != nil {
		return x.MentionedUserIds
	}
	return nil
}

type TimeZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TimeZone) Reset() {
	*x = TimeZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeZone) ProtoMessage() {}

func (x *TimeZone) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeZone.ProtoReflect.Descriptor instead.
func (*TimeZone) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *TimeZone) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location int32 `protobuf:"varint,1,opt,name=location,proto3" json:"location,omitempty"`
	Length   int32 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *Range) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

func (x *Range) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type StreakMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreakCount                              int32 `protobuf:"varint,1,opt,name=streakCount,proto3" json:"streakCount,omitempty"`
	StreakExpirationTimestampMs              int64 `protobuf:"varint,2,opt,name=streakExpirationTimestampMs,proto3" json:"streakExpirationTimestampMs,omitempty"`
	LatestExpiredStreakCount                 int32 `protobuf:"varint,3,opt,name=latestExpiredStreakCount,proto3" json:"latestExpiredStreakCount,omitempty"`
	LatestExpiredStreakExpirationTimestampMs int64 `protobuf:"varint,4,opt,name=latestExpiredStreakExpirationTimestampMs,proto3" json:"latestExpiredStreakExpirationTimestampMs,omitempty"`
}

func (x *StreakMetadata) Reset() {
	*x = StreakMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreakMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreakMetadata) ProtoMessage() {}

func (x *StreakMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreakMetadata.ProtoReflect.Descriptor instead.
func (*StreakMetadata) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *StreakMetadata) GetStreakCount() int32 {
	if x != nil {
		return x.StreakCount
	}
	return 0
}

func (x *StreakMetadata) GetStreakExpirationTimestampMs() int64 {
	if x != nil {
		return x.StreakExpirationTimestampMs
	}
	return 0
}

func (x *StreakMetadata) GetLatestExpiredStreakCount() int32 {
	if x != nil {
		return x.LatestExpiredStreakCount
	}
	return 0
}

func (x *StreakMetadata) GetLatestExpiredStreakExpirationTimestampMs() int64 {
	if x != nil {
		return x.LatestExpiredStreakExpirationTimestampMs
	}
	return 0
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x0a, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x72, 0x0a, 0x0f, 0x53, 0x6e, 0x61, 0x70, 0x56, 0x69, 0x65, 0x77, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x19, 0x73, 0x6e, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x4f,
	0x70, 0x65, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x53, 0x6e, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x69, 0x65, 0x77,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x19, 0x73, 0x6e, 0x61, 0x70, 0x50,
	0x6f, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x22, 0x45, 0x0a, 0x0b, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x10, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x75, 0x75, 0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x6d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x1a, 0x0a, 0x08, 0x54,
	0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x3b, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x8c, 0x02,
	0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4d, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x5a, 0x0a, 0x28, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x28, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x2a, 0x3a, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x01, 0x2a, 0xb1, 0x02, 0x0a, 0x09, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x53, 0x53, 0x45, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x42, 0x4c, 0x4f, 0x4f, 0x50, 0x53, 0x5f, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52,
	0x41, 0x57, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41,
	0x4e, 0x56, 0x41, 0x53, 0x5f, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x05, 0x12, 0x0b,
	0x0a, 0x07, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x44, 0x49, 0x54, 0x53, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x48, 0x55, 0x4d, 0x42,
	0x4e, 0x41, 0x49, 0x4c, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x41, 0x4d, 0x45, 0x4f, 0x10,
	0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x45, 0x42, 0x5f, 0x54, 0x48, 0x55, 0x4d, 0x42, 0x4e, 0x41,
	0x49, 0x4c, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x45, 0x42, 0x5f, 0x4d, 0x45, 0x44, 0x49,
	0x41, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x45, 0x4e, 0x53, 0x5f, 0x41, 0x53, 0x53, 0x45,
	0x54, 0x10, 0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x4f, 0x56, 0x45, 0x52,
	0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x10, 0x0f, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x50, 0x45, 0x43, 0x54, 0x41, 0x43, 0x4c,
	0x45, 0x53, 0x5f, 0x53, 0x49, 0x58, 0x44, 0x4f, 0x46, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x50,
	0x4c, 0x41, 0x49, 0x4e, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x11, 0x2a, 0x27, 0x0a, 0x0e,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x55, 0x72, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x49, 0x54, 0x4d,
	0x4f, 0x4a, 0x49, 0x10, 0x01, 0x2a, 0xac, 0x04, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4e, 0x41, 0x50, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x43, 0x48, 0x41, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x58, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x54, 0x45,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x05, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x4c,
	0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x32, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x4f,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52,
	0x41, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x10, 0x09, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x53, 0x48,
	0x4f, 0x54, 0x10, 0x0a, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x50, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x49, 0x53, 0x53,
	0x45, 0x44, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x45, 0x44,
	0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x4e, 0x56, 0x41,
	0x53, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x49, 0x56, 0x45, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x10,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x4f, 0x4f,
	0x4c, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x41, 0x4d, 0x49,
	0x4c, 0x59, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45,
	0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x43, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x13, 0x12, 0x17, 0x0a, 0x13,
	0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x45,
	0x41, 0x56, 0x45, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4e, 0x41, 0x50, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x15, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x5f, 0x47, 0x49, 0x46, 0x54,
	0x10, 0x16, 0x12, 0x20, 0x0a, 0x1c, 0x4e, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x43,
	0x49, 0x50, 0x41, 0x4e, 0x54, 0x5f, 0x42, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x10, 0x17, 0x2a, 0x92, 0x01, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x69,
	0x7a, 0x65, 0x64, 0x54, 0x54, 0x4c, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x49, 0x5a, 0x45, 0x44, 0x5f, 0x54, 0x54, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4e, 0x45, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x49, 0x58, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x06, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x0c, 0x12,
	0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x54, 0x57, 0x4f, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x66, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x48,
	0x52, 0x45, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x67, 0x12, 0x0d, 0x0a, 0x08, 0x4f, 0x4e,
	0x45, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0xc9, 0x01, 0x2a, 0x2a, 0x0a, 0x06, 0x43, 0x6f, 0x72,
	0x70, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x52, 0x50, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x52, 0x50, 0x55, 0x53, 0x5f,
	0x55, 0x52, 0x4c, 0x10, 0x01, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_common_proto_goTypes = []interface{}{
	(ConversationType)(0),          // 0: common.ConversationType
	(AssetType)(0),                 // 1: common.AssetType
	(DynamicUrlType)(0),            // 2: common.DynamicUrlType
	(ContentType)(0),               // 3: common.ContentType
	(CustomizedTTL)(0),             // 4: common.CustomizedTTL
	(Corpus)(0),                    // 5: common.Corpus
	(*SnapViewability)(nil),        // 6: common.SnapViewability
	(*MentionInfo)(nil),            // 7: common.MentionInfo
	(*TimeZone)(nil),               // 8: common.TimeZone
	(*Empty)(nil),                  // 9: common.Empty
	(*Range)(nil),                  // 10: common.Range
	(*StreakMetadata)(nil),         // 11: common.StreakMetadata
	(SnapPostOpenViewingPolicy)(0), // 12: policy.SnapPostOpenViewingPolicy
	(*UUID)(nil),                   // 13: uuid.UUID
}
var file_common_proto_depIdxs = []int32{
	12, // 0: common.SnapViewability.snapPostOpenViewingPolicy:type_name -> policy.SnapPostOpenViewingPolicy
	13, // 1: common.MentionInfo.mentionedUserIds:type_name -> uuid.UUID
	2,  // [2:2] is the sub-list for method output_type
	2,  // [2:2] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	file_uuid_proto_init()
	file_policy_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapViewability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MentionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreakMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
