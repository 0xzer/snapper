// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: conversation.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HighWatermark_WatermarkType int32

const (
	HighWatermark_WatermarkType_READ         HighWatermark_WatermarkType = 0
	HighWatermark_WatermarkType_RELEASE      HighWatermark_WatermarkType = 1
	HighWatermark_WatermarkType_SNAP_RELEASE HighWatermark_WatermarkType = 2
)

// Enum value maps for HighWatermark_WatermarkType.
var (
	HighWatermark_WatermarkType_name = map[int32]string{
		0: "READ",
		1: "RELEASE",
		2: "SNAP_RELEASE",
	}
	HighWatermark_WatermarkType_value = map[string]int32{
		"READ":         0,
		"RELEASE":      1,
		"SNAP_RELEASE": 2,
	}
)

func (x HighWatermark_WatermarkType) Enum() *HighWatermark_WatermarkType {
	p := new(HighWatermark_WatermarkType)
	*p = x
	return p
}

func (x HighWatermark_WatermarkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HighWatermark_WatermarkType) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[0].Descriptor()
}

func (HighWatermark_WatermarkType) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[0]
}

func (x HighWatermark_WatermarkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HighWatermark_WatermarkType.Descriptor instead.
func (HighWatermark_WatermarkType) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{0}
}

type ChatNotificationPreference int32

const (
	ChatNotificationPreference_ALL_MESSAGES ChatNotificationPreference = 0
	ChatNotificationPreference_SILENT       ChatNotificationPreference = 1
	ChatNotificationPreference_MENTION_ONLY ChatNotificationPreference = 2
)

// Enum value maps for ChatNotificationPreference.
var (
	ChatNotificationPreference_name = map[int32]string{
		0: "ALL_MESSAGES",
		1: "SILENT",
		2: "MENTION_ONLY",
	}
	ChatNotificationPreference_value = map[string]int32{
		"ALL_MESSAGES": 0,
		"SILENT":       1,
		"MENTION_ONLY": 2,
	}
)

func (x ChatNotificationPreference) Enum() *ChatNotificationPreference {
	p := new(ChatNotificationPreference)
	*p = x
	return p
}

func (x ChatNotificationPreference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatNotificationPreference) Descriptor() protoreflect.EnumDescriptor {
	return file_conversation_proto_enumTypes[1].Descriptor()
}

func (ChatNotificationPreference) Type() protoreflect.EnumType {
	return &file_conversation_proto_enumTypes[1]
}

func (x ChatNotificationPreference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatNotificationPreference.Descriptor instead.
func (ChatNotificationPreference) EnumDescriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{1}
}

type Conversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId                 *UUID                     `protobuf:"bytes,1,opt,name=conversationId,proto3" json:"conversationId,omitempty"`
	Title                          string                    `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Participants                   []*Participant            `protobuf:"bytes,3,rep,name=participants,proto3" json:"participants,omitempty"`
	RetentionPolicy                *RetentionPolicy          `protobuf:"bytes,4,opt,name=retentionPolicy,proto3" json:"retentionPolicy,omitempty"`
	Version                        int64                     `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	Type                           ConversationType          `protobuf:"varint,6,opt,name=type,proto3,enum=common.ConversationType" json:"type,omitempty"`
	CreatorUserId                  *UUID                     `protobuf:"bytes,7,opt,name=creatorUserId,proto3" json:"creatorUserId,omitempty"`
	CreationTimeMs                 int64                     `protobuf:"varint,8,opt,name=creationTimeMs,proto3" json:"creationTimeMs,omitempty"`
	SelfUserInfo                   *SelfUserInfo             `protobuf:"bytes,9,opt,name=selfUserInfo,proto3" json:"selfUserInfo,omitempty"`
	StreakMetadata                 *StreakMetadata           `protobuf:"bytes,10,opt,name=streakMetadata,proto3" json:"streakMetadata,omitempty"`
	RecipientReadReactionWatermark int64                     `protobuf:"varint,12,opt,name=recipientReadReactionWatermark,proto3" json:"recipientReadReactionWatermark,omitempty"`
	AllowedJoinMethods             int32                     `protobuf:"varint,16,opt,name=allowedJoinMethods,proto3" json:"allowedJoinMethods,omitempty"`
	IsOneOnOneRetentionMigrated    bool                      `protobuf:"varint,17,opt,name=isOneOnOneRetentionMigrated,proto3" json:"isOneOnOneRetentionMigrated,omitempty"`
	ChatWallpaper                  *ChatWallpaper            `protobuf:"bytes,18,opt,name=chatWallpaper,proto3" json:"chatWallpaper,omitempty"`
	IsLocked                       bool                      `protobuf:"varint,19,opt,name=isLocked,proto3" json:"isLocked,omitempty"`
	KickedParticipants             []*KickedParticipant      `protobuf:"bytes,20,rep,name=kickedParticipants,proto3" json:"kickedParticipants,omitempty"`
	HideFromSendtoAndSearch        bool                      `protobuf:"varint,21,opt,name=hideFromSendtoAndSearch,proto3" json:"hideFromSendtoAndSearch,omitempty"`
	IsStreakEndStatusMessageSent   bool                      `protobuf:"varint,22,opt,name=isStreakEndStatusMessageSent,proto3" json:"isStreakEndStatusMessageSent,omitempty"`
	SubType                        int32                     `protobuf:"varint,23,opt,name=subType,proto3" json:"subType,omitempty"`
	SnapPostOpenViewingPolicy      SnapPostOpenViewingPolicy `protobuf:"varint,24,opt,name=snapPostOpenViewingPolicy,proto3,enum=policy.SnapPostOpenViewingPolicy" json:"snapPostOpenViewingPolicy,omitempty"`
}

func (x *Conversation) Reset() {
	*x = Conversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversation) ProtoMessage() {}

func (x *Conversation) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversation.ProtoReflect.Descriptor instead.
func (*Conversation) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{0}
}

func (x *Conversation) GetConversationId() *UUID {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *Conversation) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Conversation) GetParticipants() []*Participant {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *Conversation) GetRetentionPolicy() *RetentionPolicy {
	if x != nil {
		return x.RetentionPolicy
	}
	return nil
}

func (x *Conversation) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Conversation) GetType() ConversationType {
	if x != nil {
		return x.Type
	}
	return ConversationType_ONE_ON_ONE
}

func (x *Conversation) GetCreatorUserId() *UUID {
	if x != nil {
		return x.CreatorUserId
	}
	return nil
}

func (x *Conversation) GetCreationTimeMs() int64 {
	if x != nil {
		return x.CreationTimeMs
	}
	return 0
}

func (x *Conversation) GetSelfUserInfo() *SelfUserInfo {
	if x != nil {
		return x.SelfUserInfo
	}
	return nil
}

func (x *Conversation) GetStreakMetadata() *StreakMetadata {
	if x != nil {
		return x.StreakMetadata
	}
	return nil
}

func (x *Conversation) GetRecipientReadReactionWatermark() int64 {
	if x != nil {
		return x.RecipientReadReactionWatermark
	}
	return 0
}

func (x *Conversation) GetAllowedJoinMethods() int32 {
	if x != nil {
		return x.AllowedJoinMethods
	}
	return 0
}

func (x *Conversation) GetIsOneOnOneRetentionMigrated() bool {
	if x != nil {
		return x.IsOneOnOneRetentionMigrated
	}
	return false
}

func (x *Conversation) GetChatWallpaper() *ChatWallpaper {
	if x != nil {
		return x.ChatWallpaper
	}
	return nil
}

func (x *Conversation) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (x *Conversation) GetKickedParticipants() []*KickedParticipant {
	if x != nil {
		return x.KickedParticipants
	}
	return nil
}

func (x *Conversation) GetHideFromSendtoAndSearch() bool {
	if x != nil {
		return x.HideFromSendtoAndSearch
	}
	return false
}

func (x *Conversation) GetIsStreakEndStatusMessageSent() bool {
	if x != nil {
		return x.IsStreakEndStatusMessageSent
	}
	return false
}

func (x *Conversation) GetSubType() int32 {
	if x != nil {
		return x.SubType
	}
	return 0
}

func (x *Conversation) GetSnapPostOpenViewingPolicy() SnapPostOpenViewingPolicy {
	if x != nil {
		return x.SnapPostOpenViewingPolicy
	}
	return SnapPostOpenViewingPolicy_POLICY_UNSET_OR_ENVELOPE
}

type LightweightConversation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId     *UUID                    `protobuf:"bytes,1,opt,name=conversationId,proto3" json:"conversationId,omitempty"`
	Version            int64                    `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	StreakMetadata     *StreakMetadata          `protobuf:"bytes,3,opt,name=streakMetadata,proto3" json:"streakMetadata,omitempty"`
	ActiveParticipants []*ActiveParticipantData `protobuf:"bytes,4,rep,name=activeParticipants,proto3" json:"activeParticipants,omitempty"`
}

func (x *LightweightConversation) Reset() {
	*x = LightweightConversation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LightweightConversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LightweightConversation) ProtoMessage() {}

func (x *LightweightConversation) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LightweightConversation.ProtoReflect.Descriptor instead.
func (*LightweightConversation) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{1}
}

func (x *LightweightConversation) GetConversationId() *UUID {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *LightweightConversation) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *LightweightConversation) GetStreakMetadata() *StreakMetadata {
	if x != nil {
		return x.StreakMetadata
	}
	return nil
}

func (x *LightweightConversation) GetActiveParticipants() []*ActiveParticipantData {
	if x != nil {
		return x.ActiveParticipants
	}
	return nil
}

type ConversationEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VersionInfo             *ConversationVersionInfo `protobuf:"bytes,1,opt,name=versionInfo,proto3" json:"versionInfo,omitempty"`
	LegacyInfo              *LegacyConversationInfo  `protobuf:"bytes,2,opt,name=legacyInfo,proto3" json:"legacyInfo,omitempty"`
	LastEventTimestamp      int64                    `protobuf:"varint,3,opt,name=lastEventTimestamp,proto3" json:"lastEventTimestamp,omitempty"`
	IsDeleted               bool                     `protobuf:"varint,4,opt,name=isDeleted,proto3" json:"isDeleted,omitempty"`
	NeedsSync               bool                     `protobuf:"varint,5,opt,name=needsSync,proto3" json:"needsSync,omitempty"`
	LastFeedUpdateInfo      *DisplayInfo             `protobuf:"bytes,6,opt,name=lastFeedUpdateInfo,proto3" json:"lastFeedUpdateInfo,omitempty"`
	Participants            []*UUID                  `protobuf:"bytes,7,rep,name=participants,proto3" json:"participants,omitempty"`
	Type                    ConversationType         `protobuf:"varint,8,opt,name=type,proto3,enum=common.ConversationType" json:"type,omitempty"`
	Title                   string                   `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	MigrationInfo           *MigrationInfo           `protobuf:"bytes,10,opt,name=migrationInfo,proto3" json:"migrationInfo,omitempty"`
	StreakMetadata          *StreakMetadata          `protobuf:"bytes,11,opt,name=streakMetadata,proto3" json:"streakMetadata,omitempty"`
	PinnedTimestamp         int64                    `protobuf:"varint,12,opt,name=pinnedTimestamp,proto3" json:"pinnedTimestamp,omitempty"`
	HideFromSendtoAndSearch bool                     `protobuf:"varint,13,opt,name=hideFromSendtoAndSearch,proto3" json:"hideFromSendtoAndSearch,omitempty"`
}

func (x *ConversationEntry) Reset() {
	*x = ConversationEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationEntry) ProtoMessage() {}

func (x *ConversationEntry) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationEntry.ProtoReflect.Descriptor instead.
func (*ConversationEntry) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{2}
}

func (x *ConversationEntry) GetVersionInfo() *ConversationVersionInfo {
	if x != nil {
		return x.VersionInfo
	}
	return nil
}

func (x *ConversationEntry) GetLegacyInfo() *LegacyConversationInfo {
	if x != nil {
		return x.LegacyInfo
	}
	return nil
}

func (x *ConversationEntry) GetLastEventTimestamp() int64 {
	if x != nil {
		return x.LastEventTimestamp
	}
	return 0
}

func (x *ConversationEntry) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *ConversationEntry) GetNeedsSync() bool {
	if x != nil {
		return x.NeedsSync
	}
	return false
}

func (x *ConversationEntry) GetLastFeedUpdateInfo() *DisplayInfo {
	if x != nil {
		return x.LastFeedUpdateInfo
	}
	return nil
}

func (x *ConversationEntry) GetParticipants() []*UUID {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *ConversationEntry) GetType() ConversationType {
	if x != nil {
		return x.Type
	}
	return ConversationType_ONE_ON_ONE
}

func (x *ConversationEntry) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ConversationEntry) GetMigrationInfo() *MigrationInfo {
	if x != nil {
		return x.MigrationInfo
	}
	return nil
}

func (x *ConversationEntry) GetStreakMetadata() *StreakMetadata {
	if x != nil {
		return x.StreakMetadata
	}
	return nil
}

func (x *ConversationEntry) GetPinnedTimestamp() int64 {
	if x != nil {
		return x.PinnedTimestamp
	}
	return 0
}

func (x *ConversationEntry) GetHideFromSendtoAndSearch() bool {
	if x != nil {
		return x.HideFromSendtoAndSearch
	}
	return false
}

type ConversationVersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId      *UUID `protobuf:"bytes,1,opt,name=conversationId,proto3" json:"conversationId,omitempty"`
	ConversationVersion int64 `protobuf:"varint,2,opt,name=conversationVersion,proto3" json:"conversationVersion,omitempty"`
}

func (x *ConversationVersionInfo) Reset() {
	*x = ConversationVersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationVersionInfo) ProtoMessage() {}

func (x *ConversationVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationVersionInfo.ProtoReflect.Descriptor instead.
func (*ConversationVersionInfo) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{3}
}

func (x *ConversationVersionInfo) GetConversationId() *UUID {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *ConversationVersionInfo) GetConversationVersion() int64 {
	if x != nil {
		return x.ConversationVersion
	}
	return 0
}

type LastConversationIndicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldestConversationOrderTimestamp int64 `protobuf:"varint,1,opt,name=oldestConversationOrderTimestamp,proto3" json:"oldestConversationOrderTimestamp,omitempty"`
	OldestConversationId             *UUID `protobuf:"bytes,2,opt,name=oldestConversationId,proto3" json:"oldestConversationId,omitempty"`
}

func (x *LastConversationIndicator) Reset() {
	*x = LastConversationIndicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastConversationIndicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastConversationIndicator) ProtoMessage() {}

func (x *LastConversationIndicator) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastConversationIndicator.ProtoReflect.Descriptor instead.
func (*LastConversationIndicator) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{4}
}

func (x *LastConversationIndicator) GetOldestConversationOrderTimestamp() int64 {
	if x != nil {
		return x.OldestConversationOrderTimestamp
	}
	return 0
}

func (x *LastConversationIndicator) GetOldestConversationId() *UUID {
	if x != nil {
		return x.OldestConversationId
	}
	return nil
}

type DisplayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisplayTimestamp      int64   `protobuf:"varint,2,opt,name=displayTimestamp,proto3" json:"displayTimestamp,omitempty"`
	LastUpdateActorUserId []*UUID `protobuf:"bytes,3,rep,name=lastUpdateActorUserId,proto3" json:"lastUpdateActorUserId,omitempty"`
	FeedItemCreatorUserId *UUID   `protobuf:"bytes,4,opt,name=feedItemCreatorUserId,proto3" json:"feedItemCreatorUserId,omitempty"`
	// Types that are assignable to LastInteractionEvent:
	//
	//	*DisplayInfo_SnapItem
	//	*DisplayInfo_ChatItem
	//	*DisplayInfo_CallItem
	//	*DisplayInfo_ConversationItem
	LastInteractionEvent   isDisplayInfo_LastInteractionEvent `protobuf_oneof:"lastInteractionEvent"`
	GroupCreationTimestamp int64                              `protobuf:"varint,14,opt,name=groupCreationTimestamp,proto3" json:"groupCreationTimestamp,omitempty"`
}

func (x *DisplayInfo) Reset() {
	*x = DisplayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayInfo) ProtoMessage() {}

func (x *DisplayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayInfo.ProtoReflect.Descriptor instead.
func (*DisplayInfo) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{5}
}

func (x *DisplayInfo) GetDisplayTimestamp() int64 {
	if x != nil {
		return x.DisplayTimestamp
	}
	return 0
}

func (x *DisplayInfo) GetLastUpdateActorUserId() []*UUID {
	if x != nil {
		return x.LastUpdateActorUserId
	}
	return nil
}

func (x *DisplayInfo) GetFeedItemCreatorUserId() *UUID {
	if x != nil {
		return x.FeedItemCreatorUserId
	}
	return nil
}

func (m *DisplayInfo) GetLastInteractionEvent() isDisplayInfo_LastInteractionEvent {
	if m != nil {
		return m.LastInteractionEvent
	}
	return nil
}

func (x *DisplayInfo) GetSnapItem() *SnapItem {
	if x, ok := x.GetLastInteractionEvent().(*DisplayInfo_SnapItem); ok {
		return x.SnapItem
	}
	return nil
}

func (x *DisplayInfo) GetChatItem() *ChatItem {
	if x, ok := x.GetLastInteractionEvent().(*DisplayInfo_ChatItem); ok {
		return x.ChatItem
	}
	return nil
}

func (x *DisplayInfo) GetCallItem() *CallItem {
	if x, ok := x.GetLastInteractionEvent().(*DisplayInfo_CallItem); ok {
		return x.CallItem
	}
	return nil
}

func (x *DisplayInfo) GetConversationItem() *ConversationItem {
	if x, ok := x.GetLastInteractionEvent().(*DisplayInfo_ConversationItem); ok {
		return x.ConversationItem
	}
	return nil
}

func (x *DisplayInfo) GetGroupCreationTimestamp() int64 {
	if x != nil {
		return x.GroupCreationTimestamp
	}
	return 0
}

type isDisplayInfo_LastInteractionEvent interface {
	isDisplayInfo_LastInteractionEvent()
}

type DisplayInfo_SnapItem struct {
	SnapItem *SnapItem `protobuf:"bytes,10,opt,name=snapItem,proto3,oneof"`
}

type DisplayInfo_ChatItem struct {
	ChatItem *ChatItem `protobuf:"bytes,11,opt,name=chatItem,proto3,oneof"`
}

type DisplayInfo_CallItem struct {
	CallItem *CallItem `protobuf:"bytes,12,opt,name=callItem,proto3,oneof"`
}

type DisplayInfo_ConversationItem struct {
	ConversationItem *ConversationItem `protobuf:"bytes,13,opt,name=conversationItem,proto3,oneof"`
}

func (*DisplayInfo_SnapItem) isDisplayInfo_LastInteractionEvent() {}

func (*DisplayInfo_ChatItem) isDisplayInfo_LastInteractionEvent() {}

func (*DisplayInfo_CallItem) isDisplayInfo_LastInteractionEvent() {}

func (*DisplayInfo_ConversationItem) isDisplayInfo_LastInteractionEvent() {}

type Participant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                            *UUID  `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Color                             int32  `protobuf:"varint,2,opt,name=color,proto3" json:"color,omitempty"`
	NotificationsEnabled              bool   `protobuf:"varint,3,opt,name=notificationsEnabled,proto3" json:"notificationsEnabled,omitempty"`
	ReadHighWatermark                 int64  `protobuf:"varint,4,opt,name=readHighWatermark,proto3" json:"readHighWatermark,omitempty"`
	ReleaseHighWatermark              int64  `protobuf:"varint,5,opt,name=releaseHighWatermark,proto3" json:"releaseHighWatermark,omitempty"`
	VideoChatUserId                   uint64 `protobuf:"varint,6,opt,name=videoChatUserId,proto3" json:"videoChatUserId,omitempty"`
	JoinedConversationLatestMessageId int64  `protobuf:"varint,7,opt,name=joinedConversationLatestMessageId,proto3" json:"joinedConversationLatestMessageId,omitempty"`
	SnapReleaseHighWatermark          int64  `protobuf:"varint,8,opt,name=snapReleaseHighWatermark,proto3" json:"snapReleaseHighWatermark,omitempty"`
	ReactionReadHighWatermark         int64  `protobuf:"varint,9,opt,name=reactionReadHighWatermark,proto3" json:"reactionReadHighWatermark,omitempty"`
}

func (x *Participant) Reset() {
	*x = Participant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Participant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Participant) ProtoMessage() {}

func (x *Participant) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Participant.ProtoReflect.Descriptor instead.
func (*Participant) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{6}
}

func (x *Participant) GetUserId() *UUID {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *Participant) GetColor() int32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *Participant) GetNotificationsEnabled() bool {
	if x != nil {
		return x.NotificationsEnabled
	}
	return false
}

func (x *Participant) GetReadHighWatermark() int64 {
	if x != nil {
		return x.ReadHighWatermark
	}
	return 0
}

func (x *Participant) GetReleaseHighWatermark() int64 {
	if x != nil {
		return x.ReleaseHighWatermark
	}
	return 0
}

func (x *Participant) GetVideoChatUserId() uint64 {
	if x != nil {
		return x.VideoChatUserId
	}
	return 0
}

func (x *Participant) GetJoinedConversationLatestMessageId() int64 {
	if x != nil {
		return x.JoinedConversationLatestMessageId
	}
	return 0
}

func (x *Participant) GetSnapReleaseHighWatermark() int64 {
	if x != nil {
		return x.SnapReleaseHighWatermark
	}
	return 0
}

func (x *Participant) GetReactionReadHighWatermark() int64 {
	if x != nil {
		return x.ReactionReadHighWatermark
	}
	return 0
}

type UpdateWatermarkResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InitiatingUserId *UUID          `protobuf:"bytes,1,opt,name=initiatingUserId,proto3" json:"initiatingUserId,omitempty"`
	Watermark        *HighWatermark `protobuf:"bytes,2,opt,name=watermark,proto3" json:"watermark,omitempty"`
	// Types that are assignable to ReadUpdate:
	//
	//	*UpdateWatermarkResult_ReadTimestamp
	ReadUpdate        isUpdateWatermarkResult_ReadUpdate `protobuf_oneof:"readUpdate"`
	ReadUpdateInfo    *UpdateWatermarkResult_ReadUpdate  `protobuf:"bytes,4,opt,name=readUpdateInfo,proto3" json:"readUpdateInfo,omitempty"`
	ReactionWatermark *HighWatermark                     `protobuf:"bytes,5,opt,name=reactionWatermark,proto3" json:"reactionWatermark,omitempty"`
}

func (x *UpdateWatermarkResult) Reset() {
	*x = UpdateWatermarkResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWatermarkResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWatermarkResult) ProtoMessage() {}

func (x *UpdateWatermarkResult) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWatermarkResult.ProtoReflect.Descriptor instead.
func (*UpdateWatermarkResult) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateWatermarkResult) GetInitiatingUserId() *UUID {
	if x != nil {
		return x.InitiatingUserId
	}
	return nil
}

func (x *UpdateWatermarkResult) GetWatermark() *HighWatermark {
	if x != nil {
		return x.Watermark
	}
	return nil
}

func (m *UpdateWatermarkResult) GetReadUpdate() isUpdateWatermarkResult_ReadUpdate {
	if m != nil {
		return m.ReadUpdate
	}
	return nil
}

func (x *UpdateWatermarkResult) GetReadTimestamp() uint64 {
	if x, ok := x.GetReadUpdate().(*UpdateWatermarkResult_ReadTimestamp); ok {
		return x.ReadTimestamp
	}
	return 0
}

func (x *UpdateWatermarkResult) GetReadUpdateInfo() *UpdateWatermarkResult_ReadUpdate {
	if x != nil {
		return x.ReadUpdateInfo
	}
	return nil
}

func (x *UpdateWatermarkResult) GetReactionWatermark() *HighWatermark {
	if x != nil {
		return x.ReactionWatermark
	}
	return nil
}

type isUpdateWatermarkResult_ReadUpdate interface {
	isUpdateWatermarkResult_ReadUpdate()
}

type UpdateWatermarkResult_ReadTimestamp struct {
	ReadTimestamp uint64 `protobuf:"varint,3,opt,name=readTimestamp,proto3,oneof"`
}

func (*UpdateWatermarkResult_ReadTimestamp) isUpdateWatermarkResult_ReadUpdate() {}

type UpdateWatermarkResult_ReadUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadTimestamp          uint64 `protobuf:"varint,1,opt,name=readTimestamp,proto3" json:"readTimestamp,omitempty"`
	ReadTimestampMessageId uint64 `protobuf:"varint,2,opt,name=readTimestampMessageId,proto3" json:"readTimestampMessageId,omitempty"`
}

func (x *UpdateWatermarkResult_ReadUpdate) Reset() {
	*x = UpdateWatermarkResult_ReadUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateWatermarkResult_ReadUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWatermarkResult_ReadUpdate) ProtoMessage() {}

func (x *UpdateWatermarkResult_ReadUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWatermarkResult_ReadUpdate.ProtoReflect.Descriptor instead.
func (*UpdateWatermarkResult_ReadUpdate) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateWatermarkResult_ReadUpdate) GetReadTimestamp() uint64 {
	if x != nil {
		return x.ReadTimestamp
	}
	return 0
}

func (x *UpdateWatermarkResult_ReadUpdate) GetReadTimestampMessageId() uint64 {
	if x != nil {
		return x.ReadTimestampMessageId
	}
	return 0
}

type HighWatermark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HighWatermarkType HighWatermark_WatermarkType `protobuf:"varint,1,opt,name=highWatermarkType,proto3,enum=conversation.HighWatermark_WatermarkType" json:"highWatermarkType,omitempty"`
	// Types that are assignable to WatermarkToken:
	//
	//	*HighWatermark_MessageId
	//	*HighWatermark_ConversationVersion
	WatermarkToken isHighWatermark_WatermarkToken `protobuf_oneof:"watermarkToken"`
}

func (x *HighWatermark) Reset() {
	*x = HighWatermark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighWatermark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighWatermark) ProtoMessage() {}

func (x *HighWatermark) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighWatermark.ProtoReflect.Descriptor instead.
func (*HighWatermark) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{9}
}

func (x *HighWatermark) GetHighWatermarkType() HighWatermark_WatermarkType {
	if x != nil {
		return x.HighWatermarkType
	}
	return HighWatermark_WatermarkType_READ
}

func (m *HighWatermark) GetWatermarkToken() isHighWatermark_WatermarkToken {
	if m != nil {
		return m.WatermarkToken
	}
	return nil
}

func (x *HighWatermark) GetMessageId() uint64 {
	if x, ok := x.GetWatermarkToken().(*HighWatermark_MessageId); ok {
		return x.MessageId
	}
	return 0
}

func (x *HighWatermark) GetConversationVersion() uint64 {
	if x, ok := x.GetWatermarkToken().(*HighWatermark_ConversationVersion); ok {
		return x.ConversationVersion
	}
	return 0
}

type isHighWatermark_WatermarkToken interface {
	isHighWatermark_WatermarkToken()
}

type HighWatermark_MessageId struct {
	MessageId uint64 `protobuf:"varint,2,opt,name=messageId,proto3,oneof"`
}

type HighWatermark_ConversationVersion struct {
	ConversationVersion uint64 `protobuf:"varint,3,opt,name=conversationVersion,proto3,oneof"`
}

func (*HighWatermark_MessageId) isHighWatermark_WatermarkToken() {}

func (*HighWatermark_ConversationVersion) isHighWatermark_WatermarkToken() {}

type ActiveParticipantData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantId             *UUID `protobuf:"bytes,1,opt,name=participantId,proto3" json:"participantId,omitempty"`
	ReadHighWatermark         int64 `protobuf:"varint,2,opt,name=readHighWatermark,proto3" json:"readHighWatermark,omitempty"`
	SnapReleaseHighWatermark  int64 `protobuf:"varint,3,opt,name=snapReleaseHighWatermark,proto3" json:"snapReleaseHighWatermark,omitempty"`
	ReactionReadHighWatermark int64 `protobuf:"varint,4,opt,name=reactionReadHighWatermark,proto3" json:"reactionReadHighWatermark,omitempty"`
	ReleaseWatermark          int64 `protobuf:"varint,5,opt,name=releaseWatermark,proto3" json:"releaseWatermark,omitempty"`
}

func (x *ActiveParticipantData) Reset() {
	*x = ActiveParticipantData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveParticipantData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveParticipantData) ProtoMessage() {}

func (x *ActiveParticipantData) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveParticipantData.ProtoReflect.Descriptor instead.
func (*ActiveParticipantData) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{10}
}

func (x *ActiveParticipantData) GetParticipantId() *UUID {
	if x != nil {
		return x.ParticipantId
	}
	return nil
}

func (x *ActiveParticipantData) GetReadHighWatermark() int64 {
	if x != nil {
		return x.ReadHighWatermark
	}
	return 0
}

func (x *ActiveParticipantData) GetSnapReleaseHighWatermark() int64 {
	if x != nil {
		return x.SnapReleaseHighWatermark
	}
	return 0
}

func (x *ActiveParticipantData) GetReactionReadHighWatermark() int64 {
	if x != nil {
		return x.ReactionReadHighWatermark
	}
	return 0
}

func (x *ActiveParticipantData) GetReleaseWatermark() int64 {
	if x != nil {
		return x.ReleaseWatermark
	}
	return 0
}

type KickedParticipant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     *UUID `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ForDisplay bool  `protobuf:"varint,2,opt,name=forDisplay,proto3" json:"forDisplay,omitempty"`
}

func (x *KickedParticipant) Reset() {
	*x = KickedParticipant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KickedParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickedParticipant) ProtoMessage() {}

func (x *KickedParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickedParticipant.ProtoReflect.Descriptor instead.
func (*KickedParticipant) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{11}
}

func (x *KickedParticipant) GetUserId() *UUID {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *KickedParticipant) GetForDisplay() bool {
	if x != nil {
		return x.ForDisplay
	}
	return false
}

type SelfUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameNotificationsPreference  int32                      `protobuf:"varint,1,opt,name=gameNotificationsPreference,proto3" json:"gameNotificationsPreference,omitempty"`
	BlockedParticipantExceptions []*UUID                    `protobuf:"bytes,2,rep,name=blockedParticipantExceptions,proto3" json:"blockedParticipantExceptions,omitempty"`
	ChatNotificationsPreference  ChatNotificationPreference `protobuf:"varint,3,opt,name=chatNotificationsPreference,proto3,enum=conversation.ChatNotificationPreference" json:"chatNotificationsPreference,omitempty"`
	JoinTimestampMs              int64                      `protobuf:"varint,4,opt,name=joinTimestampMs,proto3" json:"joinTimestampMs,omitempty"`
	PendingWatermark             int64                      `protobuf:"varint,5,opt,name=pendingWatermark,proto3" json:"pendingWatermark,omitempty"`
	FriendFeedVisibility         int32                      `protobuf:"varint,6,opt,name=friendFeedVisibility,proto3" json:"friendFeedVisibility,omitempty"`
	PinnedTimestamp              int64                      `protobuf:"varint,7,opt,name=pinnedTimestamp,proto3" json:"pinnedTimestamp,omitempty"`
	NotificationSound            int32                      `protobuf:"varint,8,opt,name=notificationSound,proto3" json:"notificationSound,omitempty"`
}

func (x *SelfUserInfo) Reset() {
	*x = SelfUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfUserInfo) ProtoMessage() {}

func (x *SelfUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfUserInfo.ProtoReflect.Descriptor instead.
func (*SelfUserInfo) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{12}
}

func (x *SelfUserInfo) GetGameNotificationsPreference() int32 {
	if x != nil {
		return x.GameNotificationsPreference
	}
	return 0
}

func (x *SelfUserInfo) GetBlockedParticipantExceptions() []*UUID {
	if x != nil {
		return x.BlockedParticipantExceptions
	}
	return nil
}

func (x *SelfUserInfo) GetChatNotificationsPreference() ChatNotificationPreference {
	if x != nil {
		return x.ChatNotificationsPreference
	}
	return ChatNotificationPreference_ALL_MESSAGES
}

func (x *SelfUserInfo) GetJoinTimestampMs() int64 {
	if x != nil {
		return x.JoinTimestampMs
	}
	return 0
}

func (x *SelfUserInfo) GetPendingWatermark() int64 {
	if x != nil {
		return x.PendingWatermark
	}
	return 0
}

func (x *SelfUserInfo) GetFriendFeedVisibility() int32 {
	if x != nil {
		return x.FriendFeedVisibility
	}
	return 0
}

func (x *SelfUserInfo) GetPinnedTimestamp() int64 {
	if x != nil {
		return x.PinnedTimestamp
	}
	return 0
}

func (x *SelfUserInfo) GetNotificationSound() int32 {
	if x != nil {
		return x.NotificationSound
	}
	return 0
}

type ChatWallpaper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetterUserId      *UUID                          `protobuf:"bytes,1,opt,name=setterUserId,proto3" json:"setterUserId,omitempty"`
	CreationTimestamp int64                          `protobuf:"varint,2,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	ContentReference  *ChatWallpaperContentReference `protobuf:"bytes,3,opt,name=contentReference,proto3" json:"contentReference,omitempty"`
	IsInAppReportable bool                           `protobuf:"varint,4,opt,name=isInAppReportable,proto3" json:"isInAppReportable,omitempty"`
	BlizzardData      *ChatWallpaperBlizzardData     `protobuf:"bytes,5,opt,name=blizzardData,proto3" json:"blizzardData,omitempty"`
}

func (x *ChatWallpaper) Reset() {
	*x = ChatWallpaper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatWallpaper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatWallpaper) ProtoMessage() {}

func (x *ChatWallpaper) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatWallpaper.ProtoReflect.Descriptor instead.
func (*ChatWallpaper) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{13}
}

func (x *ChatWallpaper) GetSetterUserId() *UUID {
	if x != nil {
		return x.SetterUserId
	}
	return nil
}

func (x *ChatWallpaper) GetCreationTimestamp() int64 {
	if x != nil {
		return x.CreationTimestamp
	}
	return 0
}

func (x *ChatWallpaper) GetContentReference() *ChatWallpaperContentReference {
	if x != nil {
		return x.ContentReference
	}
	return nil
}

func (x *ChatWallpaper) GetIsInAppReportable() bool {
	if x != nil {
		return x.IsInAppReportable
	}
	return false
}

func (x *ChatWallpaper) GetBlizzardData() *ChatWallpaperBlizzardData {
	if x != nil {
		return x.BlizzardData
	}
	return nil
}

type ChatWallpaperContentReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShouldSkipClaim bool `protobuf:"varint,1,opt,name=shouldSkipClaim,proto3" json:"shouldSkipClaim,omitempty"`
	// Types that are assignable to Reference:
	//
	//	*ChatWallpaperContentReference_WallpaperContent
	Reference isChatWallpaperContentReference_Reference `protobuf_oneof:"reference"`
}

func (x *ChatWallpaperContentReference) Reset() {
	*x = ChatWallpaperContentReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatWallpaperContentReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatWallpaperContentReference) ProtoMessage() {}

func (x *ChatWallpaperContentReference) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatWallpaperContentReference.ProtoReflect.Descriptor instead.
func (*ChatWallpaperContentReference) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{14}
}

func (x *ChatWallpaperContentReference) GetShouldSkipClaim() bool {
	if x != nil {
		return x.ShouldSkipClaim
	}
	return false
}

func (m *ChatWallpaperContentReference) GetReference() isChatWallpaperContentReference_Reference {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (x *ChatWallpaperContentReference) GetWallpaperContent() *ChatWallpaperContent {
	if x, ok := x.GetReference().(*ChatWallpaperContentReference_WallpaperContent); ok {
		return x.WallpaperContent
	}
	return nil
}

type isChatWallpaperContentReference_Reference interface {
	isChatWallpaperContentReference_Reference()
}

type ChatWallpaperContentReference_WallpaperContent struct {
	WallpaperContent *ChatWallpaperContent `protobuf:"bytes,2,opt,name=wallpaperContent,proto3,oneof"`
}

func (*ChatWallpaperContentReference_WallpaperContent) isChatWallpaperContentReference_Reference() {}

type ChatWallpaperContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContentObject []byte `protobuf:"bytes,1,opt,name=contentObject,proto3" json:"contentObject,omitempty"`
	Key           []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Iv            []byte `protobuf:"bytes,3,opt,name=iv,proto3" json:"iv,omitempty"`
}

func (x *ChatWallpaperContent) Reset() {
	*x = ChatWallpaperContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_conversation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatWallpaperContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatWallpaperContent) ProtoMessage() {}

func (x *ChatWallpaperContent) ProtoReflect() protoreflect.Message {
	mi := &file_conversation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatWallpaperContent.ProtoReflect.Descriptor instead.
func (*ChatWallpaperContent) Descriptor() ([]byte, []int) {
	return file_conversation_proto_rawDescGZIP(), []int{15}
}

func (x *ChatWallpaperContent) GetContentObject() []byte {
	if x != nil {
		return x.ContentObject
	}
	return nil
}

func (x *ChatWallpaperContent) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ChatWallpaperContent) GetIv() []byte {
	if x != nil {
		return x.Iv
	}
	return nil
}

var File_conversation_proto protoreflect.FileDescriptor

var file_conversation_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x0a, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x62, 0x6c, 0x69, 0x7a, 0x7a, 0x61, 0x72, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xdf, 0x08, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x75,
	0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3d, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0c,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0f,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3e, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x46, 0x0a, 0x1e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1e, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2e, 0x0a, 0x12, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4a, 0x6f,
	0x69, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x69, 0x73, 0x4f,
	0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b,
	0x69, 0x73, 0x4f, 0x6e, 0x65, 0x4f, 0x6e, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x63,
	0x68, 0x61, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x52,
	0x0d, 0x63, 0x68, 0x61, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x12, 0x6b, 0x69,
	0x63, 0x6b, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x12, 0x6b, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x68,
	0x69, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x6e, 0x64, 0x74, 0x6f, 0x41, 0x6e, 0x64,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x68, 0x69,
	0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x6e, 0x64, 0x74, 0x6f, 0x41, 0x6e, 0x64, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x42, 0x0a, 0x1c, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6b, 0x45, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x69, 0x73, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6b, 0x45, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x19, 0x73, 0x6e, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x4f,
	0x70, 0x65, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x53, 0x6e, 0x61, 0x70, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x69, 0x65, 0x77,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x19, 0x73, 0x6e, 0x61, 0x70, 0x50,
	0x6f, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x22, 0xfc, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x53,
	0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x22, 0xb4, 0x05, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x0b, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e,
	0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x65, 0x65, 0x64, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x49, 0x0a, 0x12, 0x6c, 0x61,
	0x73, 0x74, 0x46, 0x65, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x65, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x75,
	0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x38, 0x0a, 0x17, 0x68, 0x69, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x6e, 0x64,
	0x74, 0x6f, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x68, 0x69, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x6e, 0x64, 0x74,
	0x6f, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x7f, 0x0a, 0x17, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x75, 0x75, 0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x19,
	0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x20, 0x6f, 0x6c, 0x64,
	0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x20, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x14, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x14, 0x6f, 0x6c, 0x64, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xe5, 0x03, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x40, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x15, 0x6c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x15, 0x66, 0x65, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x15,
	0x66, 0x65, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x49, 0x74, 0x65,
	0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x2e, 0x53, 0x6e, 0x61, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6e, 0x61,
	0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x2e, 0x43, 0x68, 0x61, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x6c,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x46, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x36, 0x0a,
	0x16, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x16, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xcf, 0x03,
	0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x75, 0x75, 0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x72,
	0x65, 0x61, 0x64, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x61, 0x64, 0x48, 0x69, 0x67, 0x68,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x28, 0x0a,
	0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x61,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x21, 0x6a, 0x6f, 0x69, 0x6e, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x21, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x6e, 0x61, 0x70, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x6e, 0x61, 0x70, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x3c, 0x0a, 0x19, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61,
	0x64, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x61, 0x64, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x22,
	0xe3, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x10, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x52, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x26, 0x0a, 0x0d,
	0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x56, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x72, 0x65,
	0x61, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x11,
	0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x72, 0x6b, 0x52, 0x11, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x52, 0x65, 0x61, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65,
	0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x16, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x0d, 0x48, 0x69, 0x67,
	0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x57, 0x0a, 0x11, 0x68, 0x69,
	0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x11, 0x68, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x00, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x77, 0x61, 0x74, 0x65, 0x72,
	0x6d, 0x61, 0x72, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9d, 0x02, 0x0a, 0x15, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x75, 0x69,
	0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x64, 0x48, 0x69, 0x67,
	0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x72, 0x65, 0x61, 0x64, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x6e, 0x61, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x73, 0x6e, 0x61, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x3c, 0x0a, 0x19, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x48,
	0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x19, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64,
	0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x2a, 0x0a,
	0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x57, 0x0a, 0x11, 0x4b, 0x69, 0x63,
	0x6b, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x22, 0xee, 0x03, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x1b, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x67, 0x61, 0x6d, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x1c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x75,
	0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x1c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6a, 0x0a, 0x1b, 0x63, 0x68, 0x61, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x1b, 0x63, 0x68, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6a, 0x6f, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x72, 0x69, 0x65, 0x6e,
	0x64, 0x46, 0x65, 0x65, 0x64, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x46, 0x65, 0x65,
	0x64, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f,
	0x75, 0x6e, 0x64, 0x22, 0xbd, 0x02, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x70, 0x61, 0x70, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x75,
	0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x57, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x57, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x69, 0x73, 0x49, 0x6e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x49, 0x6e, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x62, 0x6c,
	0x69, 0x7a, 0x7a, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x62, 0x6c, 0x69, 0x7a, 0x7a, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x57, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x42, 0x6c, 0x69, 0x7a, 0x7a, 0x61, 0x72,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x62, 0x6c, 0x69, 0x7a, 0x7a, 0x61, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x22, 0xa8, 0x01, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x70, 0x61, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53,
	0x6b, 0x69, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x53, 0x6b, 0x69, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12,
	0x50, 0x0a, 0x10, 0x77, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x77, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x42, 0x0b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x5e,
	0x0a, 0x14, 0x43, 0x68, 0x61, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x70, 0x61, 0x70, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x76, 0x2a, 0x46,
	0x0a, 0x1b, 0x48, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x5f,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4c, 0x45, 0x41,
	0x53, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4e, 0x41, 0x50, 0x5f, 0x52, 0x45, 0x4c,
	0x45, 0x41, 0x53, 0x45, 0x10, 0x02, 0x2a, 0x4c, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4c, 0x45, 0x4e, 0x54,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x02, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_conversation_proto_rawDescOnce sync.Once
	file_conversation_proto_rawDescData = file_conversation_proto_rawDesc
)

func file_conversation_proto_rawDescGZIP() []byte {
	file_conversation_proto_rawDescOnce.Do(func() {
		file_conversation_proto_rawDescData = protoimpl.X.CompressGZIP(file_conversation_proto_rawDescData)
	})
	return file_conversation_proto_rawDescData
}

var file_conversation_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_conversation_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_conversation_proto_goTypes = []interface{}{
	(HighWatermark_WatermarkType)(0),         // 0: conversation.HighWatermark_WatermarkType
	(ChatNotificationPreference)(0),          // 1: conversation.ChatNotificationPreference
	(*Conversation)(nil),                     // 2: conversation.Conversation
	(*LightweightConversation)(nil),          // 3: conversation.LightweightConversation
	(*ConversationEntry)(nil),                // 4: conversation.ConversationEntry
	(*ConversationVersionInfo)(nil),          // 5: conversation.ConversationVersionInfo
	(*LastConversationIndicator)(nil),        // 6: conversation.LastConversationIndicator
	(*DisplayInfo)(nil),                      // 7: conversation.DisplayInfo
	(*Participant)(nil),                      // 8: conversation.Participant
	(*UpdateWatermarkResult)(nil),            // 9: conversation.UpdateWatermarkResult
	(*UpdateWatermarkResult_ReadUpdate)(nil), // 10: conversation.UpdateWatermarkResult_ReadUpdate
	(*HighWatermark)(nil),                    // 11: conversation.HighWatermark
	(*ActiveParticipantData)(nil),            // 12: conversation.ActiveParticipantData
	(*KickedParticipant)(nil),                // 13: conversation.KickedParticipant
	(*SelfUserInfo)(nil),                     // 14: conversation.SelfUserInfo
	(*ChatWallpaper)(nil),                    // 15: conversation.ChatWallpaper
	(*ChatWallpaperContentReference)(nil),    // 16: conversation.ChatWallpaperContentReference
	(*ChatWallpaperContent)(nil),             // 17: conversation.ChatWallpaperContent
	(*UUID)(nil),                             // 18: uuid.UUID
	(*RetentionPolicy)(nil),                  // 19: policy.RetentionPolicy
	(ConversationType)(0),                    // 20: common.ConversationType
	(*StreakMetadata)(nil),                   // 21: common.StreakMetadata
	(SnapPostOpenViewingPolicy)(0),           // 22: policy.SnapPostOpenViewingPolicy
	(*LegacyConversationInfo)(nil),           // 23: legacyConversation.LegacyConversationInfo
	(*MigrationInfo)(nil),                    // 24: states.MigrationInfo
	(*SnapItem)(nil),                         // 25: states.SnapItem
	(*ChatItem)(nil),                         // 26: states.ChatItem
	(*CallItem)(nil),                         // 27: states.CallItem
	(*ConversationItem)(nil),                 // 28: states.ConversationItem
	(*ChatWallpaperBlizzardData)(nil),        // 29: blizzard.ChatWallpaperBlizzardData
}
var file_conversation_proto_depIdxs = []int32{
	18, // 0: conversation.Conversation.conversationId:type_name -> uuid.UUID
	8,  // 1: conversation.Conversation.participants:type_name -> conversation.Participant
	19, // 2: conversation.Conversation.retentionPolicy:type_name -> policy.RetentionPolicy
	20, // 3: conversation.Conversation.type:type_name -> common.ConversationType
	18, // 4: conversation.Conversation.creatorUserId:type_name -> uuid.UUID
	14, // 5: conversation.Conversation.selfUserInfo:type_name -> conversation.SelfUserInfo
	21, // 6: conversation.Conversation.streakMetadata:type_name -> common.StreakMetadata
	15, // 7: conversation.Conversation.chatWallpaper:type_name -> conversation.ChatWallpaper
	13, // 8: conversation.Conversation.kickedParticipants:type_name -> conversation.KickedParticipant
	22, // 9: conversation.Conversation.snapPostOpenViewingPolicy:type_name -> policy.SnapPostOpenViewingPolicy
	18, // 10: conversation.LightweightConversation.conversationId:type_name -> uuid.UUID
	21, // 11: conversation.LightweightConversation.streakMetadata:type_name -> common.StreakMetadata
	12, // 12: conversation.LightweightConversation.activeParticipants:type_name -> conversation.ActiveParticipantData
	5,  // 13: conversation.ConversationEntry.versionInfo:type_name -> conversation.ConversationVersionInfo
	23, // 14: conversation.ConversationEntry.legacyInfo:type_name -> legacyConversation.LegacyConversationInfo
	7,  // 15: conversation.ConversationEntry.lastFeedUpdateInfo:type_name -> conversation.DisplayInfo
	18, // 16: conversation.ConversationEntry.participants:type_name -> uuid.UUID
	20, // 17: conversation.ConversationEntry.type:type_name -> common.ConversationType
	24, // 18: conversation.ConversationEntry.migrationInfo:type_name -> states.MigrationInfo
	21, // 19: conversation.ConversationEntry.streakMetadata:type_name -> common.StreakMetadata
	18, // 20: conversation.ConversationVersionInfo.conversationId:type_name -> uuid.UUID
	18, // 21: conversation.LastConversationIndicator.oldestConversationId:type_name -> uuid.UUID
	18, // 22: conversation.DisplayInfo.lastUpdateActorUserId:type_name -> uuid.UUID
	18, // 23: conversation.DisplayInfo.feedItemCreatorUserId:type_name -> uuid.UUID
	25, // 24: conversation.DisplayInfo.snapItem:type_name -> states.SnapItem
	26, // 25: conversation.DisplayInfo.chatItem:type_name -> states.ChatItem
	27, // 26: conversation.DisplayInfo.callItem:type_name -> states.CallItem
	28, // 27: conversation.DisplayInfo.conversationItem:type_name -> states.ConversationItem
	18, // 28: conversation.Participant.userId:type_name -> uuid.UUID
	18, // 29: conversation.UpdateWatermarkResult.initiatingUserId:type_name -> uuid.UUID
	11, // 30: conversation.UpdateWatermarkResult.watermark:type_name -> conversation.HighWatermark
	10, // 31: conversation.UpdateWatermarkResult.readUpdateInfo:type_name -> conversation.UpdateWatermarkResult_ReadUpdate
	11, // 32: conversation.UpdateWatermarkResult.reactionWatermark:type_name -> conversation.HighWatermark
	0,  // 33: conversation.HighWatermark.highWatermarkType:type_name -> conversation.HighWatermark_WatermarkType
	18, // 34: conversation.ActiveParticipantData.participantId:type_name -> uuid.UUID
	18, // 35: conversation.KickedParticipant.userId:type_name -> uuid.UUID
	18, // 36: conversation.SelfUserInfo.blockedParticipantExceptions:type_name -> uuid.UUID
	1,  // 37: conversation.SelfUserInfo.chatNotificationsPreference:type_name -> conversation.ChatNotificationPreference
	18, // 38: conversation.ChatWallpaper.setterUserId:type_name -> uuid.UUID
	16, // 39: conversation.ChatWallpaper.contentReference:type_name -> conversation.ChatWallpaperContentReference
	29, // 40: conversation.ChatWallpaper.blizzardData:type_name -> blizzard.ChatWallpaperBlizzardData
	17, // 41: conversation.ChatWallpaperContentReference.wallpaperContent:type_name -> conversation.ChatWallpaperContent
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_conversation_proto_init() }
func file_conversation_proto_init() {
	if File_conversation_proto != nil {
		return
	}
	file_uuid_proto_init()
	file_legacyConversation_proto_init()
	file_states_proto_init()
	file_blizzard_proto_init()
	file_common_proto_init()
	file_policy_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_conversation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LightweightConversation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationVersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LastConversationIndicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Participant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWatermarkResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateWatermarkResult_ReadUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighWatermark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveParticipantData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KickedParticipant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatWallpaper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatWallpaperContentReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_conversation_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatWallpaperContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_conversation_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*DisplayInfo_SnapItem)(nil),
		(*DisplayInfo_ChatItem)(nil),
		(*DisplayInfo_CallItem)(nil),
		(*DisplayInfo_ConversationItem)(nil),
	}
	file_conversation_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*UpdateWatermarkResult_ReadTimestamp)(nil),
	}
	file_conversation_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*HighWatermark_MessageId)(nil),
		(*HighWatermark_ConversationVersion)(nil),
	}
	file_conversation_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*ChatWallpaperContentReference_WallpaperContent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_conversation_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_conversation_proto_goTypes,
		DependencyIndexes: file_conversation_proto_depIdxs,
		EnumInfos:         file_conversation_proto_enumTypes,
		MessageInfos:      file_conversation_proto_msgTypes,
	}.Build()
	File_conversation_proto = out.File
	file_conversation_proto_rawDesc = nil
	file_conversation_proto_goTypes = nil
	file_conversation_proto_depIdxs = nil
}
