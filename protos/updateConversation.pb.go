// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: updateConversation.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UpdateConversationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId     *UUID  `protobuf:"bytes,1,opt,name=conversationId,proto3" json:"conversationId,omitempty"`
	ClientResolutionId uint64 `protobuf:"varint,2,opt,name=clientResolutionId,proto3" json:"clientResolutionId,omitempty"`
	CurrentVersion     int64  `protobuf:"varint,3,opt,name=currentVersion,proto3" json:"currentVersion,omitempty"`
	// Types that are assignable to UpdateConversationAction:
	//
	//	*UpdateConversationRequest_ConversationTitle
	//	*UpdateConversationRequest_AddParticipants
	//	*UpdateConversationRequest_LeaveConversation
	//	*UpdateConversationRequest_RetentionPolicy
	//	*UpdateConversationRequest_NotificationPreference
	//	*UpdateConversationRequest_Read
	//	*UpdateConversationRequest_ClearFromChatFeed
	UpdateConversationAction isUpdateConversationRequest_UpdateConversationAction `protobuf_oneof:"updateConversationAction"`
}

func (x *UpdateConversationRequest) Reset() {
	*x = UpdateConversationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_updateConversation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationRequest) ProtoMessage() {}

func (x *UpdateConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_updateConversation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationRequest.ProtoReflect.Descriptor instead.
func (*UpdateConversationRequest) Descriptor() ([]byte, []int) {
	return file_updateConversation_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateConversationRequest) GetConversationId() *UUID {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *UpdateConversationRequest) GetClientResolutionId() uint64 {
	if x != nil {
		return x.ClientResolutionId
	}
	return 0
}

func (x *UpdateConversationRequest) GetCurrentVersion() int64 {
	if x != nil {
		return x.CurrentVersion
	}
	return 0
}

func (m *UpdateConversationRequest) GetUpdateConversationAction() isUpdateConversationRequest_UpdateConversationAction {
	if m != nil {
		return m.UpdateConversationAction
	}
	return nil
}

func (x *UpdateConversationRequest) GetConversationTitle() *UpdateConversationTitle {
	if x, ok := x.GetUpdateConversationAction().(*UpdateConversationRequest_ConversationTitle); ok {
		return x.ConversationTitle
	}
	return nil
}

func (x *UpdateConversationRequest) GetAddParticipants() *UpdateConversationAddParticipants {
	if x, ok := x.GetUpdateConversationAction().(*UpdateConversationRequest_AddParticipants); ok {
		return x.AddParticipants
	}
	return nil
}

func (x *UpdateConversationRequest) GetLeaveConversation() *UpdateConversationLeave {
	if x, ok := x.GetUpdateConversationAction().(*UpdateConversationRequest_LeaveConversation); ok {
		return x.LeaveConversation
	}
	return nil
}

func (x *UpdateConversationRequest) GetRetentionPolicy() *UpdateConversationRetentionPolicy {
	if x, ok := x.GetUpdateConversationAction().(*UpdateConversationRequest_RetentionPolicy); ok {
		return x.RetentionPolicy
	}
	return nil
}

func (x *UpdateConversationRequest) GetNotificationPreference() *UpdateConversationNotificationPreference {
	if x, ok := x.GetUpdateConversationAction().(*UpdateConversationRequest_NotificationPreference); ok {
		return x.NotificationPreference
	}
	return nil
}

func (x *UpdateConversationRequest) GetRead() *UpdateConversationRead {
	if x, ok := x.GetUpdateConversationAction().(*UpdateConversationRequest_Read); ok {
		return x.Read
	}
	return nil
}

func (x *UpdateConversationRequest) GetClearFromChatFeed() *UpdateConversationClearFromFeed {
	if x, ok := x.GetUpdateConversationAction().(*UpdateConversationRequest_ClearFromChatFeed); ok {
		return x.ClearFromChatFeed
	}
	return nil
}

type isUpdateConversationRequest_UpdateConversationAction interface {
	isUpdateConversationRequest_UpdateConversationAction()
}

type UpdateConversationRequest_ConversationTitle struct {
	ConversationTitle *UpdateConversationTitle `protobuf:"bytes,4,opt,name=conversationTitle,proto3,oneof"`
}

type UpdateConversationRequest_AddParticipants struct {
	AddParticipants *UpdateConversationAddParticipants `protobuf:"bytes,5,opt,name=addParticipants,proto3,oneof"`
}

type UpdateConversationRequest_LeaveConversation struct {
	LeaveConversation *UpdateConversationLeave `protobuf:"bytes,6,opt,name=leaveConversation,proto3,oneof"`
}

type UpdateConversationRequest_RetentionPolicy struct {
	RetentionPolicy *UpdateConversationRetentionPolicy `protobuf:"bytes,7,opt,name=retentionPolicy,proto3,oneof"`
}

type UpdateConversationRequest_NotificationPreference struct {
	NotificationPreference *UpdateConversationNotificationPreference `protobuf:"bytes,8,opt,name=notificationPreference,proto3,oneof"`
}

type UpdateConversationRequest_Read struct {
	Read *UpdateConversationRead `protobuf:"bytes,10,opt,name=read,proto3,oneof"`
}

type UpdateConversationRequest_ClearFromChatFeed struct {
	ClearFromChatFeed *UpdateConversationClearFromFeed `protobuf:"bytes,11,opt,name=clearFromChatFeed,proto3,oneof"`
}

func (*UpdateConversationRequest_ConversationTitle) isUpdateConversationRequest_UpdateConversationAction() {
}

func (*UpdateConversationRequest_AddParticipants) isUpdateConversationRequest_UpdateConversationAction() {
}

func (*UpdateConversationRequest_LeaveConversation) isUpdateConversationRequest_UpdateConversationAction() {
}

func (*UpdateConversationRequest_RetentionPolicy) isUpdateConversationRequest_UpdateConversationAction() {
}

func (*UpdateConversationRequest_NotificationPreference) isUpdateConversationRequest_UpdateConversationAction() {
}

func (*UpdateConversationRequest_Read) isUpdateConversationRequest_UpdateConversationAction() {}

func (*UpdateConversationRequest_ClearFromChatFeed) isUpdateConversationRequest_UpdateConversationAction() {
}

type UpdateConversationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId     *UUID                     `protobuf:"bytes,1,opt,name=conversationId,proto3" json:"conversationId,omitempty"`
	ClientResolutionId uint64                    `protobuf:"varint,2,opt,name=clientResolutionId,proto3" json:"clientResolutionId,omitempty"`
	UpdateData         *UpdateConversationResult `protobuf:"bytes,3,opt,name=updateData,proto3" json:"updateData,omitempty"`
	Result             *FailureReason            `protobuf:"bytes,99,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *UpdateConversationResponse) Reset() {
	*x = UpdateConversationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_updateConversation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationResponse) ProtoMessage() {}

func (x *UpdateConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_updateConversation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationResponse.ProtoReflect.Descriptor instead.
func (*UpdateConversationResponse) Descriptor() ([]byte, []int) {
	return file_updateConversation_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateConversationResponse) GetConversationId() *UUID {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *UpdateConversationResponse) GetClientResolutionId() uint64 {
	if x != nil {
		return x.ClientResolutionId
	}
	return 0
}

func (x *UpdateConversationResponse) GetUpdateData() *UpdateConversationResult {
	if x != nil {
		return x.UpdateData
	}
	return nil
}

func (x *UpdateConversationResponse) GetResult() *FailureReason {
	if x != nil {
		return x.Result
	}
	return nil
}

type UpdateConversationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentVersion int64                           `protobuf:"varint,1,opt,name=currentVersion,proto3" json:"currentVersion,omitempty"`
	Success        bool                            `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	ActionResult   *UpdateConversationActionResult `protobuf:"bytes,4,opt,name=actionResult,proto3" json:"actionResult,omitempty"`
}

func (x *UpdateConversationResult) Reset() {
	*x = UpdateConversationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_updateConversation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConversationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationResult) ProtoMessage() {}

func (x *UpdateConversationResult) ProtoReflect() protoreflect.Message {
	mi := &file_updateConversation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationResult.ProtoReflect.Descriptor instead.
func (*UpdateConversationResult) Descriptor() ([]byte, []int) {
	return file_updateConversation_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateConversationResult) GetCurrentVersion() int64 {
	if x != nil {
		return x.CurrentVersion
	}
	return 0
}

func (x *UpdateConversationResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateConversationResult) GetActionResult() *UpdateConversationActionResult {
	if x != nil {
		return x.ActionResult
	}
	return nil
}

type UpdateConversationActionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversationId *UUID           `protobuf:"bytes,1,opt,name=conversationId,proto3" json:"conversationId,omitempty"`
	CurrentVersion int64           `protobuf:"varint,2,opt,name=currentVersion,proto3" json:"currentVersion,omitempty"`
	StatusMessage  *ContentMessage `protobuf:"bytes,8,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
	// Types that are assignable to Result:
	//
	//	*UpdateConversationActionResult_ConversationTitleResult
	//	*UpdateConversationActionResult_NewParticipants
	//	*UpdateConversationActionResult_LeaveResult
	//	*UpdateConversationActionResult_RetentionPolicyResult
	//	*UpdateConversationActionResult_ReadConversationResult
	//	*UpdateConversationActionResult_ClearFromFeedResult
	Result isUpdateConversationActionResult_Result `protobuf_oneof:"result"`
}

func (x *UpdateConversationActionResult) Reset() {
	*x = UpdateConversationActionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_updateConversation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConversationActionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationActionResult) ProtoMessage() {}

func (x *UpdateConversationActionResult) ProtoReflect() protoreflect.Message {
	mi := &file_updateConversation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationActionResult.ProtoReflect.Descriptor instead.
func (*UpdateConversationActionResult) Descriptor() ([]byte, []int) {
	return file_updateConversation_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateConversationActionResult) GetConversationId() *UUID {
	if x != nil {
		return x.ConversationId
	}
	return nil
}

func (x *UpdateConversationActionResult) GetCurrentVersion() int64 {
	if x != nil {
		return x.CurrentVersion
	}
	return 0
}

func (x *UpdateConversationActionResult) GetStatusMessage() *ContentMessage {
	if x != nil {
		return x.StatusMessage
	}
	return nil
}

func (m *UpdateConversationActionResult) GetResult() isUpdateConversationActionResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *UpdateConversationActionResult) GetConversationTitleResult() *UpdateConversationTitle {
	if x, ok := x.GetResult().(*UpdateConversationActionResult_ConversationTitleResult); ok {
		return x.ConversationTitleResult
	}
	return nil
}

func (x *UpdateConversationActionResult) GetNewParticipants() *AddParticipantsResult {
	if x, ok := x.GetResult().(*UpdateConversationActionResult_NewParticipants); ok {
		return x.NewParticipants
	}
	return nil
}

func (x *UpdateConversationActionResult) GetLeaveResult() *ConversationLeaveResult {
	if x, ok := x.GetResult().(*UpdateConversationActionResult_LeaveResult); ok {
		return x.LeaveResult
	}
	return nil
}

func (x *UpdateConversationActionResult) GetRetentionPolicyResult() *UpdateConversationRetentionPolicy {
	if x, ok := x.GetResult().(*UpdateConversationActionResult_RetentionPolicyResult); ok {
		return x.RetentionPolicyResult
	}
	return nil
}

func (x *UpdateConversationActionResult) GetReadConversationResult() *UpdateConversationRead {
	if x, ok := x.GetResult().(*UpdateConversationActionResult_ReadConversationResult); ok {
		return x.ReadConversationResult
	}
	return nil
}

func (x *UpdateConversationActionResult) GetClearFromFeedResult() *UpdateConversationClearFromFeedResult {
	if x, ok := x.GetResult().(*UpdateConversationActionResult_ClearFromFeedResult); ok {
		return x.ClearFromFeedResult
	}
	return nil
}

type isUpdateConversationActionResult_Result interface {
	isUpdateConversationActionResult_Result()
}

type UpdateConversationActionResult_ConversationTitleResult struct {
	ConversationTitleResult *UpdateConversationTitle `protobuf:"bytes,3,opt,name=conversationTitleResult,proto3,oneof"`
}

type UpdateConversationActionResult_NewParticipants struct {
	NewParticipants *AddParticipantsResult `protobuf:"bytes,4,opt,name=newParticipants,proto3,oneof"`
}

type UpdateConversationActionResult_LeaveResult struct {
	LeaveResult *ConversationLeaveResult `protobuf:"bytes,5,opt,name=leaveResult,proto3,oneof"`
}

type UpdateConversationActionResult_RetentionPolicyResult struct {
	RetentionPolicyResult *UpdateConversationRetentionPolicy `protobuf:"bytes,6,opt,name=retentionPolicyResult,proto3,oneof"`
}

type UpdateConversationActionResult_ReadConversationResult struct {
	ReadConversationResult *UpdateConversationRead `protobuf:"bytes,7,opt,name=readConversationResult,proto3,oneof"`
}

type UpdateConversationActionResult_ClearFromFeedResult struct {
	ClearFromFeedResult *UpdateConversationClearFromFeedResult `protobuf:"bytes,9,opt,name=clearFromFeedResult,proto3,oneof"`
}

func (*UpdateConversationActionResult_ConversationTitleResult) isUpdateConversationActionResult_Result() {
}

func (*UpdateConversationActionResult_NewParticipants) isUpdateConversationActionResult_Result() {}

func (*UpdateConversationActionResult_LeaveResult) isUpdateConversationActionResult_Result() {}

func (*UpdateConversationActionResult_RetentionPolicyResult) isUpdateConversationActionResult_Result() {
}

func (*UpdateConversationActionResult_ReadConversationResult) isUpdateConversationActionResult_Result() {
}

func (*UpdateConversationActionResult_ClearFromFeedResult) isUpdateConversationActionResult_Result() {
}

type UpdateConversationClearFromFeedResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateConversationClearFromFeedResult) Reset() {
	*x = UpdateConversationClearFromFeedResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_updateConversation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConversationClearFromFeedResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationClearFromFeedResult) ProtoMessage() {}

func (x *UpdateConversationClearFromFeedResult) ProtoReflect() protoreflect.Message {
	mi := &file_updateConversation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationClearFromFeedResult.ProtoReflect.Descriptor instead.
func (*UpdateConversationClearFromFeedResult) Descriptor() ([]byte, []int) {
	return file_updateConversation_proto_rawDescGZIP(), []int{4}
}

type UpdateConversationClearFromFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfUserId      *UUID `protobuf:"bytes,1,opt,name=selfUserId,proto3" json:"selfUserId,omitempty"`
	UpdateTimestamp int64 `protobuf:"varint,11,opt,name=updateTimestamp,proto3" json:"updateTimestamp,omitempty"` // nowTimestamp
}

func (x *UpdateConversationClearFromFeed) Reset() {
	*x = UpdateConversationClearFromFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_updateConversation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConversationClearFromFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationClearFromFeed) ProtoMessage() {}

func (x *UpdateConversationClearFromFeed) ProtoReflect() protoreflect.Message {
	mi := &file_updateConversation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationClearFromFeed.ProtoReflect.Descriptor instead.
func (*UpdateConversationClearFromFeed) Descriptor() ([]byte, []int) {
	return file_updateConversation_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateConversationClearFromFeed) GetSelfUserId() *UUID {
	if x != nil {
		return x.SelfUserId
	}
	return nil
}

func (x *UpdateConversationClearFromFeed) GetUpdateTimestamp() int64 {
	if x != nil {
		return x.UpdateTimestamp
	}
	return 0
}

type UpdateConversationRead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfUserId                  *UUID                        `protobuf:"bytes,1,opt,name=selfUserId,proto3" json:"selfUserId,omitempty"`
	ReadConversationMessageData *ReadConversationMessageData `protobuf:"bytes,2,opt,name=readConversationMessageData,proto3" json:"readConversationMessageData,omitempty"`
}

func (x *UpdateConversationRead) Reset() {
	*x = UpdateConversationRead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_updateConversation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConversationRead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationRead) ProtoMessage() {}

func (x *UpdateConversationRead) ProtoReflect() protoreflect.Message {
	mi := &file_updateConversation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationRead.ProtoReflect.Descriptor instead.
func (*UpdateConversationRead) Descriptor() ([]byte, []int) {
	return file_updateConversation_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateConversationRead) GetSelfUserId() *UUID {
	if x != nil {
		return x.SelfUserId
	}
	return nil
}

func (x *UpdateConversationRead) GetReadConversationMessageData() *ReadConversationMessageData {
	if x != nil {
		return x.ReadConversationMessageData
	}
	return nil
}

type ReadConversationMessageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastMessageId int64 `protobuf:"varint,2,opt,name=lastMessageId,proto3" json:"lastMessageId,omitempty"`
}

func (x *ReadConversationMessageData) Reset() {
	*x = ReadConversationMessageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_updateConversation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadConversationMessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadConversationMessageData) ProtoMessage() {}

func (x *ReadConversationMessageData) ProtoReflect() protoreflect.Message {
	mi := &file_updateConversation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadConversationMessageData.ProtoReflect.Descriptor instead.
func (*ReadConversationMessageData) Descriptor() ([]byte, []int) {
	return file_updateConversation_proto_rawDescGZIP(), []int{7}
}

func (x *ReadConversationMessageData) GetLastMessageId() int64 {
	if x != nil {
		return x.LastMessageId
	}
	return 0
}

type UpdateConversationRetentionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfUserId      *UUID            `protobuf:"bytes,1,opt,name=selfUserId,proto3" json:"selfUserId,omitempty"`
	RetentionPolicy *RetentionPolicy `protobuf:"bytes,2,opt,name=retentionPolicy,proto3" json:"retentionPolicy,omitempty"`
}

func (x *UpdateConversationRetentionPolicy) Reset() {
	*x = UpdateConversationRetentionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_updateConversation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConversationRetentionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationRetentionPolicy) ProtoMessage() {}

func (x *UpdateConversationRetentionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_updateConversation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationRetentionPolicy.ProtoReflect.Descriptor instead.
func (*UpdateConversationRetentionPolicy) Descriptor() ([]byte, []int) {
	return file_updateConversation_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateConversationRetentionPolicy) GetSelfUserId() *UUID {
	if x != nil {
		return x.SelfUserId
	}
	return nil
}

func (x *UpdateConversationRetentionPolicy) GetRetentionPolicy() *RetentionPolicy {
	if x != nil {
		return x.RetentionPolicy
	}
	return nil
}

type UpdateConversationNotificationPreference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfUserId *UUID                      `protobuf:"bytes,1,opt,name=selfUserId,proto3" json:"selfUserId,omitempty"`
	SomeInt    int32                      `protobuf:"varint,2,opt,name=someInt,proto3" json:"someInt,omitempty"`   // only set when setting to all_messages?
	SomeInt2   int32                      `protobuf:"varint,3,opt,name=someInt2,proto3" json:"someInt2,omitempty"` // always set to 1? bool?
	Setting    ChatNotificationPreference `protobuf:"varint,4,opt,name=setting,proto3,enum=conversation.ChatNotificationPreference" json:"setting,omitempty"`
}

func (x *UpdateConversationNotificationPreference) Reset() {
	*x = UpdateConversationNotificationPreference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_updateConversation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConversationNotificationPreference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationNotificationPreference) ProtoMessage() {}

func (x *UpdateConversationNotificationPreference) ProtoReflect() protoreflect.Message {
	mi := &file_updateConversation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationNotificationPreference.ProtoReflect.Descriptor instead.
func (*UpdateConversationNotificationPreference) Descriptor() ([]byte, []int) {
	return file_updateConversation_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateConversationNotificationPreference) GetSelfUserId() *UUID {
	if x != nil {
		return x.SelfUserId
	}
	return nil
}

func (x *UpdateConversationNotificationPreference) GetSomeInt() int32 {
	if x != nil {
		return x.SomeInt
	}
	return 0
}

func (x *UpdateConversationNotificationPreference) GetSomeInt2() int32 {
	if x != nil {
		return x.SomeInt2
	}
	return 0
}

func (x *UpdateConversationNotificationPreference) GetSetting() ChatNotificationPreference {
	if x != nil {
		return x.Setting
	}
	return ChatNotificationPreference_ALL_MESSAGES
}

type UpdateConversationTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfUserId *UUID  `protobuf:"bytes,1,opt,name=selfUserId,proto3" json:"selfUserId,omitempty"`
	OldTitle   string `protobuf:"bytes,2,opt,name=oldTitle,proto3" json:"oldTitle,omitempty"`
	NewTitle   string `protobuf:"bytes,3,opt,name=newTitle,proto3" json:"newTitle,omitempty"`
}

func (x *UpdateConversationTitle) Reset() {
	*x = UpdateConversationTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_updateConversation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConversationTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationTitle) ProtoMessage() {}

func (x *UpdateConversationTitle) ProtoReflect() protoreflect.Message {
	mi := &file_updateConversation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationTitle.ProtoReflect.Descriptor instead.
func (*UpdateConversationTitle) Descriptor() ([]byte, []int) {
	return file_updateConversation_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateConversationTitle) GetSelfUserId() *UUID {
	if x != nil {
		return x.SelfUserId
	}
	return nil
}

func (x *UpdateConversationTitle) GetOldTitle() string {
	if x != nil {
		return x.OldTitle
	}
	return ""
}

func (x *UpdateConversationTitle) GetNewTitle() string {
	if x != nil {
		return x.NewTitle
	}
	return ""
}

type UpdateConversationAddParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfUserId   *UUID   `protobuf:"bytes,1,opt,name=selfUserId,proto3" json:"selfUserId,omitempty"`
	Participants []*UUID `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *UpdateConversationAddParticipants) Reset() {
	*x = UpdateConversationAddParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_updateConversation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConversationAddParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationAddParticipants) ProtoMessage() {}

func (x *UpdateConversationAddParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_updateConversation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationAddParticipants.ProtoReflect.Descriptor instead.
func (*UpdateConversationAddParticipants) Descriptor() ([]byte, []int) {
	return file_updateConversation_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateConversationAddParticipants) GetSelfUserId() *UUID {
	if x != nil {
		return x.SelfUserId
	}
	return nil
}

func (x *UpdateConversationAddParticipants) GetParticipants() []*UUID {
	if x != nil {
		return x.Participants
	}
	return nil
}

type UpdateConversationLeave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfUserId     *UUID `protobuf:"bytes,1,opt,name=selfUserId,proto3" json:"selfUserId,omitempty"`
	SelfUserIdLeft *UUID `protobuf:"bytes,2,opt,name=selfUserIdLeft,proto3" json:"selfUserIdLeft,omitempty"` // might be repeated participants? in the future, I think this will also be the way to "kick" participants
}

func (x *UpdateConversationLeave) Reset() {
	*x = UpdateConversationLeave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_updateConversation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConversationLeave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationLeave) ProtoMessage() {}

func (x *UpdateConversationLeave) ProtoReflect() protoreflect.Message {
	mi := &file_updateConversation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationLeave.ProtoReflect.Descriptor instead.
func (*UpdateConversationLeave) Descriptor() ([]byte, []int) {
	return file_updateConversation_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateConversationLeave) GetSelfUserId() *UUID {
	if x != nil {
		return x.SelfUserId
	}
	return nil
}

func (x *UpdateConversationLeave) GetSelfUserIdLeft() *UUID {
	if x != nil {
		return x.SelfUserIdLeft
	}
	return nil
}

type ConversationLeaveResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfUserId *UUID `protobuf:"bytes,1,opt,name=selfUserId,proto3" json:"selfUserId,omitempty"`
}

func (x *ConversationLeaveResult) Reset() {
	*x = ConversationLeaveResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_updateConversation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConversationLeaveResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationLeaveResult) ProtoMessage() {}

func (x *ConversationLeaveResult) ProtoReflect() protoreflect.Message {
	mi := &file_updateConversation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationLeaveResult.ProtoReflect.Descriptor instead.
func (*ConversationLeaveResult) Descriptor() ([]byte, []int) {
	return file_updateConversation_proto_rawDescGZIP(), []int{13}
}

func (x *ConversationLeaveResult) GetSelfUserId() *UUID {
	if x != nil {
		return x.SelfUserId
	}
	return nil
}

type AddParticipantsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfUserId        *UUID          `protobuf:"bytes,1,opt,name=selfUserId,proto3" json:"selfUserId,omitempty"`
	AddedParticipants []*Participant `protobuf:"bytes,2,rep,name=addedParticipants,proto3" json:"addedParticipants,omitempty"`
}

func (x *AddParticipantsResult) Reset() {
	*x = AddParticipantsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_updateConversation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddParticipantsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddParticipantsResult) ProtoMessage() {}

func (x *AddParticipantsResult) ProtoReflect() protoreflect.Message {
	mi := &file_updateConversation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddParticipantsResult.ProtoReflect.Descriptor instead.
func (*AddParticipantsResult) Descriptor() ([]byte, []int) {
	return file_updateConversation_proto_rawDescGZIP(), []int{14}
}

func (x *AddParticipantsResult) GetSelfUserId() *UUID {
	if x != nil {
		return x.SelfUserId
	}
	return nil
}

func (x *AddParticipantsResult) GetAddedParticipants() []*Participant {
	if x != nil {
		return x.AddedParticipants
	}
	return nil
}

var File_updateConversation_proto protoreflect.FileDescriptor

var file_updateConversation_proto_rawDesc = []byte{
	0x0a, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0a,
	0x75, 0x75, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x68, 0x74, 0x74, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x06, 0x0a, 0x19, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x61, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x48,
	0x00, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x12, 0x5b, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x65,
	0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x61, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48,
	0x00, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x76, 0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x72, 0x65,
	0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x61, 0x64, 0x48, 0x00, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x12, 0x63, 0x0a, 0x11,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x46, 0x65, 0x65,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x64, 0x48, 0x00, 0x52, 0x11,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x61, 0x74, 0x46, 0x65, 0x65,
	0x64, 0x42, 0x1a, 0x0a, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfb, 0x01,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x4c, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x18,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x9b, 0x06, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x75, 0x75, 0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x67, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x48,
	0x00, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x55, 0x0a, 0x0f, 0x6e, 0x65,
	0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x12, 0x4f, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x6d, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x64, 0x0a, 0x16, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x00, 0x52,
	0x16, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x6d, 0x0a, 0x13, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x46, 0x72, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48,
	0x00, 0x52, 0x13, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x27, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x46,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x77, 0x0a, 0x1f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x46, 0x65, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x0a,
	0x73, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65,
	0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0xb7, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2a, 0x0a,
	0x0a, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x73,
	0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x71, 0x0a, 0x1b, 0x72, 0x65, 0x61,
	0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x1b, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x43, 0x0a, 0x1b,
	0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x22, 0x92, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x75,
	0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xd0, 0x01, 0x0a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x6f, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x73, 0x6f, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x6d,
	0x65, 0x49, 0x6e, 0x74, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x6f, 0x6d,
	0x65, 0x49, 0x6e, 0x74, 0x32, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x7d, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x65, 0x77, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x65, 0x77, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x7f, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a,
	0x0a, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x73,
	0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x79, 0x0a, 0x17, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x65, 0x61, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x65,
	0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x2e,
	0x55, 0x55, 0x49, 0x44, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x4c, 0x65, 0x66, 0x74, 0x22, 0x45, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x2a, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x75, 0x69, 0x64, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x52,
	0x0a, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x15,
	0x41, 0x64, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x75, 0x69, 0x64,
	0x2e, 0x55, 0x55, 0x49, 0x44, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x11, 0x61, 0x64, 0x64, 0x65, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_updateConversation_proto_rawDescOnce sync.Once
	file_updateConversation_proto_rawDescData = file_updateConversation_proto_rawDesc
)

func file_updateConversation_proto_rawDescGZIP() []byte {
	file_updateConversation_proto_rawDescOnce.Do(func() {
		file_updateConversation_proto_rawDescData = protoimpl.X.CompressGZIP(file_updateConversation_proto_rawDescData)
	})
	return file_updateConversation_proto_rawDescData
}

var file_updateConversation_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_updateConversation_proto_goTypes = []interface{}{
	(*UpdateConversationRequest)(nil),                // 0: updateConversation.UpdateConversationRequest
	(*UpdateConversationResponse)(nil),               // 1: updateConversation.UpdateConversationResponse
	(*UpdateConversationResult)(nil),                 // 2: updateConversation.UpdateConversationResult
	(*UpdateConversationActionResult)(nil),           // 3: updateConversation.UpdateConversationActionResult
	(*UpdateConversationClearFromFeedResult)(nil),    // 4: updateConversation.UpdateConversationClearFromFeedResult
	(*UpdateConversationClearFromFeed)(nil),          // 5: updateConversation.UpdateConversationClearFromFeed
	(*UpdateConversationRead)(nil),                   // 6: updateConversation.UpdateConversationRead
	(*ReadConversationMessageData)(nil),              // 7: updateConversation.ReadConversationMessageData
	(*UpdateConversationRetentionPolicy)(nil),        // 8: updateConversation.UpdateConversationRetentionPolicy
	(*UpdateConversationNotificationPreference)(nil), // 9: updateConversation.UpdateConversationNotificationPreference
	(*UpdateConversationTitle)(nil),                  // 10: updateConversation.UpdateConversationTitle
	(*UpdateConversationAddParticipants)(nil),        // 11: updateConversation.UpdateConversationAddParticipants
	(*UpdateConversationLeave)(nil),                  // 12: updateConversation.UpdateConversationLeave
	(*ConversationLeaveResult)(nil),                  // 13: updateConversation.ConversationLeaveResult
	(*AddParticipantsResult)(nil),                    // 14: updateConversation.AddParticipantsResult
	(*UUID)(nil),                                     // 15: uuid.UUID
	(*FailureReason)(nil),                            // 16: http.FailureReason
	(*ContentMessage)(nil),                           // 17: messages.ContentMessage
	(*RetentionPolicy)(nil),                          // 18: policy.RetentionPolicy
	(ChatNotificationPreference)(0),                  // 19: conversation.ChatNotificationPreference
	(*Participant)(nil),                              // 20: conversation.Participant
}
var file_updateConversation_proto_depIdxs = []int32{
	15, // 0: updateConversation.UpdateConversationRequest.conversationId:type_name -> uuid.UUID
	10, // 1: updateConversation.UpdateConversationRequest.conversationTitle:type_name -> updateConversation.UpdateConversationTitle
	11, // 2: updateConversation.UpdateConversationRequest.addParticipants:type_name -> updateConversation.UpdateConversationAddParticipants
	12, // 3: updateConversation.UpdateConversationRequest.leaveConversation:type_name -> updateConversation.UpdateConversationLeave
	8,  // 4: updateConversation.UpdateConversationRequest.retentionPolicy:type_name -> updateConversation.UpdateConversationRetentionPolicy
	9,  // 5: updateConversation.UpdateConversationRequest.notificationPreference:type_name -> updateConversation.UpdateConversationNotificationPreference
	6,  // 6: updateConversation.UpdateConversationRequest.read:type_name -> updateConversation.UpdateConversationRead
	5,  // 7: updateConversation.UpdateConversationRequest.clearFromChatFeed:type_name -> updateConversation.UpdateConversationClearFromFeed
	15, // 8: updateConversation.UpdateConversationResponse.conversationId:type_name -> uuid.UUID
	2,  // 9: updateConversation.UpdateConversationResponse.updateData:type_name -> updateConversation.UpdateConversationResult
	16, // 10: updateConversation.UpdateConversationResponse.result:type_name -> http.FailureReason
	3,  // 11: updateConversation.UpdateConversationResult.actionResult:type_name -> updateConversation.UpdateConversationActionResult
	15, // 12: updateConversation.UpdateConversationActionResult.conversationId:type_name -> uuid.UUID
	17, // 13: updateConversation.UpdateConversationActionResult.statusMessage:type_name -> messages.ContentMessage
	10, // 14: updateConversation.UpdateConversationActionResult.conversationTitleResult:type_name -> updateConversation.UpdateConversationTitle
	14, // 15: updateConversation.UpdateConversationActionResult.newParticipants:type_name -> updateConversation.AddParticipantsResult
	13, // 16: updateConversation.UpdateConversationActionResult.leaveResult:type_name -> updateConversation.ConversationLeaveResult
	8,  // 17: updateConversation.UpdateConversationActionResult.retentionPolicyResult:type_name -> updateConversation.UpdateConversationRetentionPolicy
	6,  // 18: updateConversation.UpdateConversationActionResult.readConversationResult:type_name -> updateConversation.UpdateConversationRead
	4,  // 19: updateConversation.UpdateConversationActionResult.clearFromFeedResult:type_name -> updateConversation.UpdateConversationClearFromFeedResult
	15, // 20: updateConversation.UpdateConversationClearFromFeed.selfUserId:type_name -> uuid.UUID
	15, // 21: updateConversation.UpdateConversationRead.selfUserId:type_name -> uuid.UUID
	7,  // 22: updateConversation.UpdateConversationRead.readConversationMessageData:type_name -> updateConversation.ReadConversationMessageData
	15, // 23: updateConversation.UpdateConversationRetentionPolicy.selfUserId:type_name -> uuid.UUID
	18, // 24: updateConversation.UpdateConversationRetentionPolicy.retentionPolicy:type_name -> policy.RetentionPolicy
	15, // 25: updateConversation.UpdateConversationNotificationPreference.selfUserId:type_name -> uuid.UUID
	19, // 26: updateConversation.UpdateConversationNotificationPreference.setting:type_name -> conversation.ChatNotificationPreference
	15, // 27: updateConversation.UpdateConversationTitle.selfUserId:type_name -> uuid.UUID
	15, // 28: updateConversation.UpdateConversationAddParticipants.selfUserId:type_name -> uuid.UUID
	15, // 29: updateConversation.UpdateConversationAddParticipants.participants:type_name -> uuid.UUID
	15, // 30: updateConversation.UpdateConversationLeave.selfUserId:type_name -> uuid.UUID
	15, // 31: updateConversation.UpdateConversationLeave.selfUserIdLeft:type_name -> uuid.UUID
	15, // 32: updateConversation.ConversationLeaveResult.selfUserId:type_name -> uuid.UUID
	15, // 33: updateConversation.AddParticipantsResult.selfUserId:type_name -> uuid.UUID
	20, // 34: updateConversation.AddParticipantsResult.addedParticipants:type_name -> conversation.Participant
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_updateConversation_proto_init() }
func file_updateConversation_proto_init() {
	if File_updateConversation_proto != nil {
		return
	}
	file_uuid_proto_init()
	file_http_proto_init()
	file_messages_proto_init()
	file_policy_proto_init()
	file_conversation_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_updateConversation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConversationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_updateConversation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConversationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_updateConversation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConversationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_updateConversation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConversationActionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_updateConversation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConversationClearFromFeedResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_updateConversation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConversationClearFromFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_updateConversation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConversationRead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_updateConversation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadConversationMessageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_updateConversation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConversationRetentionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_updateConversation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConversationNotificationPreference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_updateConversation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConversationTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_updateConversation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConversationAddParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_updateConversation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConversationLeave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_updateConversation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConversationLeaveResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_updateConversation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddParticipantsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_updateConversation_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*UpdateConversationRequest_ConversationTitle)(nil),
		(*UpdateConversationRequest_AddParticipants)(nil),
		(*UpdateConversationRequest_LeaveConversation)(nil),
		(*UpdateConversationRequest_RetentionPolicy)(nil),
		(*UpdateConversationRequest_NotificationPreference)(nil),
		(*UpdateConversationRequest_Read)(nil),
		(*UpdateConversationRequest_ClearFromChatFeed)(nil),
	}
	file_updateConversation_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*UpdateConversationActionResult_ConversationTitleResult)(nil),
		(*UpdateConversationActionResult_NewParticipants)(nil),
		(*UpdateConversationActionResult_LeaveResult)(nil),
		(*UpdateConversationActionResult_RetentionPolicyResult)(nil),
		(*UpdateConversationActionResult_ReadConversationResult)(nil),
		(*UpdateConversationActionResult_ClearFromFeedResult)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_updateConversation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_updateConversation_proto_goTypes,
		DependencyIndexes: file_updateConversation_proto_depIdxs,
		MessageInfos:      file_updateConversation_proto_msgTypes,
	}.Build()
	File_updateConversation_proto = out.File
	file_updateConversation_proto_rawDesc = nil
	file_updateConversation_proto_goTypes = nil
	file_updateConversation_proto_depIdxs = nil
}
